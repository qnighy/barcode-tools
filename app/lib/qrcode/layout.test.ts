import { expect, test } from "vitest";
import { bitPositions } from "./layout";

function renderBitPositionsA(iter: IterableIterator<[number, number]>): (number | null)[][] {
  const positions = [...iter];
  const width = Math.max(...positions.map(([x]) => x)) + 1;
  const height = Math.max(...positions.map(([, y]) => y)) + 1;
  const table: (number | null)[][] = Array.from({ length: height }, () => Array.from({ length: width }, () => null));
  for (let i = 0; i < positions.length; i++) {
    const [x, y] = positions[i];
    if (table[y][x] != null) {
      throw new Error(`Duplicate bit position: (${x}, ${y})`);
    }
    table[y][x] = Math.floor(i / 8) % 10;
  }
  return table;
}
function renderBitPositionsB(iter: IterableIterator<[number, number]>): (number | null)[][] {
  const positions = [...iter];
  const width = Math.max(...positions.map(([x]) => x)) + 1;
  const height = Math.max(...positions.map(([, y]) => y)) + 1;
  const table: (number | null)[][] = Array.from({ length: height }, () => Array.from({ length: width }, () => null));
  for (let i = 0; i < positions.length; i++) {
    const [x, y] = positions[i];
    if (table[y][x] != null) {
      throw new Error(`Duplicate bit position: (${x}, ${y})`);
    }
    table[y][x] = i % 8;
  }
  return table;
}
const X: null = null;
const o: null = null;
const _: null = null;

test("bitPositions for Version M2", () => {
  expect(renderBitPositionsA(bitPositions("M2"))).toEqual([
    [X,X,X,X,X,X,X,_,X,_,_,_,_],
    [X,_,_,_,_,_,X,_,o,3,3,2,2],
    [X,_,X,X,X,_,X,_,o,3,3,2,2],
    [X,_,X,X,X,_,X,_,o,3,3,2,2],
    [X,_,X,X,X,_,X,_,o,3,3,2,2],
    [X,_,_,_,_,_,X,_,o,4,4,1,1],
    [X,X,X,X,X,X,X,_,o,4,4,1,1],
    [_,_,_,_,_,_,_,_,o,4,4,1,1],
    [X,o,o,o,o,o,o,o,o,4,4,1,1],
    [_,9,9,8,8,7,7,6,6,5,5,0,0],
    [_,9,9,8,8,7,7,6,6,5,5,0,0],
    [_,9,9,8,8,7,7,6,6,5,5,0,0],
    [_,9,9,8,8,7,7,6,6,5,5,0,0],
  ]);
  expect(renderBitPositionsB(bitPositions("M2"))).toEqual([
    [X,X,X,X,X,X,X,_,X,X,X,X,X],
    [X,_,_,_,_,_,X,_,o,1,0,7,6],
    [X,_,X,X,X,_,X,_,o,3,2,5,4],
    [X,_,X,X,X,_,X,_,o,5,4,3,2],
    [X,_,X,X,X,_,X,_,o,7,6,1,0],
    [X,_,_,_,_,_,X,_,o,1,0,7,6],
    [X,X,X,X,X,X,X,_,o,3,2,5,4],
    [_,_,_,_,_,_,_,_,o,5,4,3,2],
    [o,o,o,o,o,o,o,o,o,7,6,1,0],
    [X,1,0,7,6,1,0,7,6,1,0,7,6],
    [X,3,2,5,4,3,2,5,4,3,2,5,4],
    [X,5,4,3,2,5,4,3,2,5,4,3,2],
    [X,7,6,1,0,7,6,1,0,7,6,1,0],
  ]);
});

test("bitPositions for Version 7", () => {
  expect(renderBitPositionsA(bitPositions(7))).toEqual([
    [X,X,X,X,X,X,X,_,o,1,1,1,1,9,9,9,9,7,7,7,7,1,1,0,0,2,2,2,2,0,0,0,0,9,o,o,o,_,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,X,_,o,2,2,1,1,0,0,9,9,8,8,7,7,1,1,0,0,2,2,2,2,0,0,0,0,9,o,o,o,_,X,_,_,_,_,_,X],
    [X,_,X,X,X,_,X,_,o,2,2,1,1,0,0,9,9,8,8,7,7,1,1,0,0,3,3,1,1,1,1,9,9,9,o,o,o,_,X,_,X,X,X,_,X],
    [X,_,X,X,X,_,X,_,o,2,2,0,0,0,0,8,8,8,8,6,6,1,1,0,0,3,3,1,1,1,1,9,9,9,o,o,o,_,X,_,X,X,X,_,X],
    [X,_,X,X,X,_,X,_,o,2,2,0,0,0,0,8,8,8,8,6,X,X,X,X,X,3,3,1,1,1,1,9,9,9,o,o,o,_,X,_,X,X,X,_,X],
    [X,_,_,_,_,_,X,_,o,3,3,0,0,1,1,8,8,9,9,6,X,_,_,_,X,3,3,1,1,1,1,9,9,9,o,o,o,_,X,_,_,_,_,_,X],
    [X,X,X,X,X,X,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,X,X,X,X,X,X],
    [_,_,_,_,_,_,_,_,o,3,3,0,0,1,1,8,8,9,9,6,X,_,_,_,X,4,4,0,0,2,2,8,8,0,0,9,9,_,_,_,_,_,_,_,_],
    [o,o,o,o,o,o,X,o,o,3,3,9,9,1,1,7,7,9,9,6,X,X,X,X,X,4,4,0,0,2,2,8,8,0,0,8,8,o,o,o,o,o,o,o,o],
    [9,9,9,9,8,8,_,8,8,3,3,9,9,1,1,7,7,9,9,6,6,2,2,9,9,4,4,0,0,2,2,8,8,0,0,8,8,4,4,4,4,9,9,8,8],
    [0,0,9,9,8,8,X,8,8,4,4,9,9,2,2,7,7,0,0,5,5,2,2,9,9,4,4,0,0,2,2,8,8,0,0,8,8,4,4,4,4,9,9,8,8],
    [0,0,9,9,9,9,_,7,7,4,4,9,9,2,2,7,7,0,0,5,5,2,2,9,9,5,5,9,9,3,3,7,7,1,1,8,8,5,5,3,3,9,9,8,8],
    [0,0,8,8,9,9,X,7,7,4,4,8,8,2,2,6,6,0,0,5,5,2,2,9,9,5,5,9,9,3,3,7,7,1,1,7,7,5,5,3,3,9,9,8,8],
    [0,0,8,8,9,9,_,7,7,4,4,8,8,2,2,6,6,0,0,5,5,3,3,8,8,5,5,9,9,3,3,7,7,1,1,7,7,5,5,3,3,0,0,7,7],
    [1,1,8,8,9,9,X,7,7,5,5,8,8,3,3,6,6,1,1,4,4,3,3,8,8,5,5,9,9,3,3,7,7,1,1,7,7,5,5,3,3,0,0,7,7],
    [1,1,8,8,0,0,_,6,6,5,5,8,8,3,3,6,6,1,1,4,4,3,3,8,8,6,6,8,8,4,4,6,6,2,2,7,7,6,6,2,2,0,0,7,7],
    [1,1,7,7,0,0,X,6,6,5,5,7,7,3,3,5,5,1,1,4,4,3,3,8,8,6,6,8,8,4,4,6,6,2,2,6,6,6,6,2,2,0,0,7,7],
    [1,1,7,7,0,0,_,6,6,5,5,7,7,3,3,5,5,1,1,4,4,4,4,7,7,6,6,8,8,4,4,6,6,2,2,6,6,6,6,2,2,1,1,6,6],
    [2,2,7,7,0,0,X,6,6,6,6,7,7,4,4,5,5,2,2,3,3,4,4,7,7,6,6,8,8,4,4,6,6,2,2,6,6,6,6,2,2,1,1,6,6],
    [2,2,7,7,1,1,_,5,5,6,6,7,7,4,4,5,5,2,2,3,3,4,4,7,7,7,7,7,7,5,5,5,5,3,3,6,6,7,7,1,1,1,1,6,6],
    [2,2,6,6,X,X,X,X,X,6,6,6,6,4,4,4,4,2,2,3,X,X,X,X,X,7,7,7,7,5,5,5,5,3,3,5,X,X,X,X,X,1,1,6,6],
    [2,2,6,6,X,_,_,_,X,6,6,6,6,4,4,4,4,2,2,3,X,_,_,_,X,7,7,7,7,5,5,5,5,3,3,5,X,_,_,_,X,2,2,5,5],
    [3,3,6,6,X,_,X,_,X,7,7,6,6,5,5,4,4,3,3,3,X,_,X,_,X,7,7,7,7,5,5,5,5,3,3,5,X,_,X,_,X,2,2,5,5],
    [3,3,6,6,X,_,_,_,X,7,7,6,6,5,5,4,4,3,3,3,X,_,_,_,X,8,8,6,6,6,6,4,4,4,4,5,X,_,_,_,X,2,2,5,5],
    [3,3,5,5,X,X,X,X,X,7,7,5,5,5,5,3,3,3,3,2,X,X,X,X,X,8,8,6,6,6,6,4,4,4,4,5,X,X,X,X,X,2,2,5,5],
    [3,3,5,5,1,1,_,5,5,7,7,5,5,5,5,3,3,3,3,2,2,4,4,7,7,8,8,6,6,6,6,4,4,4,4,5,5,7,7,1,1,3,3,4,4],
    [4,4,5,5,1,1,X,5,5,8,8,5,5,6,6,3,3,4,4,2,2,5,5,6,6,8,8,6,6,6,6,4,4,4,4,5,4,7,7,1,1,3,3,4,4],
    [4,4,5,5,1,1,_,5,5,8,8,5,5,6,6,3,3,4,4,2,2,5,5,6,6,9,9,5,5,7,7,3,3,5,5,4,4,7,7,1,1,3,3,4,4],
    [4,4,4,4,2,2,X,4,4,8,8,4,4,6,6,2,2,4,4,2,1,5,5,6,6,9,9,5,5,7,7,3,3,5,5,4,4,8,8,0,0,3,3,4,4],
    [4,4,4,4,2,2,_,4,4,8,8,4,4,6,6,2,2,4,4,1,1,5,5,6,6,9,9,5,5,7,7,3,3,5,5,4,4,8,8,0,0,4,4,3,3],
    [5,5,4,4,2,2,X,4,4,9,9,4,4,7,7,2,2,5,5,1,1,6,6,5,5,9,9,5,5,7,7,3,3,5,5,4,3,8,8,0,0,4,4,3,3],
    [5,5,4,4,2,2,_,4,4,9,9,4,4,7,7,2,2,5,5,1,1,6,6,5,5,0,0,4,4,8,8,2,2,6,6,3,3,8,8,0,0,4,4,3,3],
    [5,5,3,3,3,3,X,3,3,9,9,3,3,7,7,1,1,5,5,1,0,6,6,5,5,0,0,4,4,8,8,2,2,6,6,3,3,9,9,9,9,4,4,3,3],
    [5,5,3,3,3,3,_,3,3,9,9,3,3,7,7,1,1,5,5,0,0,6,6,5,5,0,0,4,4,8,8,2,2,6,6,3,3,9,9,9,9,5,5,2,2],
    [o,o,o,o,o,o,X,3,3,0,0,3,3,8,8,1,1,6,6,0,0,7,7,4,4,0,0,4,4,8,8,2,2,6,6,3,2,9,9,9,9,5,5,2,2],
    [o,o,o,o,o,o,_,3,3,0,0,3,3,8,8,1,1,6,6,0,0,7,7,4,4,1,1,3,3,9,9,1,1,7,7,2,2,9,9,9,9,5,5,2,2],
    [o,o,o,o,o,o,X,2,2,0,0,2,2,8,8,0,0,6,6,0,X,X,X,X,X,1,1,3,3,9,9,1,1,7,7,2,X,X,X,X,X,5,5,2,2],
    [_,_,_,_,_,_,_,_,X,0,0,2,2,8,8,0,0,6,6,9,X,_,_,_,X,1,1,3,3,9,9,1,1,7,7,2,X,_,_,_,X,6,6,1,1],
    [X,X,X,X,X,X,X,_,X,1,1,2,2,9,9,0,0,7,7,9,X,_,X,_,X,1,1,3,3,9,9,1,1,7,7,2,X,_,X,_,X,6,6,1,1],
    [X,_,_,_,_,_,X,_,X,1,1,2,2,9,9,0,0,7,7,9,X,_,_,_,X,2,2,2,2,0,0,0,0,8,8,2,X,_,_,_,X,6,6,1,1],
    [X,_,X,X,X,_,X,_,X,1,1,1,1,9,9,9,9,7,7,9,X,X,X,X,X,2,2,2,2,0,0,0,0,8,8,2,X,X,X,X,X,6,6,1,1],
    [X,_,X,X,X,_,X,_,X,1,1,1,1,9,9,9,9,7,7,9,9,7,7,4,4,2,2,2,2,0,0,0,0,8,8,1,1,0,0,8,8,7,7,0,0],
    [X,_,X,X,X,_,X,_,X,2,2,1,1,0,0,9,9,8,8,9,9,7,7,4,4,2,2,2,2,0,0,0,0,8,8,1,1,0,0,8,8,7,7,0,0],
    [X,_,_,_,_,_,X,_,X,2,2,1,1,0,0,9,9,8,8,8,8,8,8,3,3,3,3,1,1,1,1,9,9,9,9,1,1,0,0,8,8,7,7,0,0],
    [X,X,X,X,X,X,X,_,X,2,2,0,0,0,0,8,8,8,8,8,8,8,8,3,3,3,3,1,1,1,1,9,9,9,9,1,1,0,0,8,8,7,7,0,0],
  ]);
  expect(renderBitPositionsB(bitPositions(7))).toEqual([
    [X,X,X,X,X,X,X,_,o,7,6,5,4,7,6,5,4,7,6,5,4,1,0,7,6,5,4,3,2,5,4,3,2,2,o,o,o,_,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,X,_,o,1,0,3,2,1,0,3,2,1,0,3,2,3,2,5,4,7,6,1,0,7,6,1,0,3,o,o,o,_,X,_,_,_,_,_,X],
    [X,_,X,X,X,_,X,_,o,3,2,1,0,3,2,1,0,3,2,1,0,5,4,3,2,1,0,7,6,1,0,7,6,4,o,o,o,_,X,_,X,X,X,_,X],
    [X,_,X,X,X,_,X,_,o,5,4,7,6,5,4,7,6,5,4,7,6,7,6,1,0,3,2,5,4,3,2,5,4,5,o,o,o,_,X,_,X,X,X,_,X],
    [X,_,X,X,X,_,X,_,o,7,6,5,4,7,6,5,4,7,6,5,X,X,X,X,X,5,4,3,2,5,4,3,2,6,o,o,o,_,X,_,X,X,X,_,X],
    [X,_,_,_,_,_,X,_,o,1,0,3,2,1,0,3,2,1,0,4,X,_,_,_,X,7,6,1,0,7,6,1,0,7,o,o,o,_,X,_,_,_,_,_,X],
    [X,X,X,X,X,X,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,_,X,X,X,X,X,X,X],
    [_,_,_,_,_,_,_,_,o,3,2,1,0,3,2,1,0,3,2,3,X,_,_,_,X,1,0,7,6,1,0,7,6,1,0,1,0,_,_,_,_,_,_,_,_],
    [o,o,o,o,o,o,X,o,o,5,4,7,6,5,4,7,6,5,4,2,X,X,X,X,X,3,2,5,4,3,2,5,4,3,2,7,6,o,o,o,o,o,o,o,o],
    [7,6,5,4,5,4,_,3,2,7,6,5,4,7,6,5,4,7,6,1,0,1,0,7,6,5,4,3,2,5,4,3,2,5,4,5,4,5,4,3,2,1,0,7,6],
    [1,0,3,2,7,6,X,1,0,1,0,3,2,1,0,3,2,1,0,7,6,3,2,5,4,7,6,1,0,7,6,1,0,7,6,3,2,7,6,1,0,3,2,5,4],
    [3,2,1,0,1,0,_,7,6,3,2,1,0,3,2,1,0,3,2,5,4,5,4,3,2,1,0,7,6,1,0,7,6,1,0,1,0,1,0,7,6,5,4,3,2],
    [5,4,7,6,3,2,X,5,4,5,4,7,6,5,4,7,6,5,4,3,2,7,6,1,0,3,2,5,4,3,2,5,4,3,2,7,6,3,2,5,4,7,6,1,0],
    [7,6,5,4,5,4,_,3,2,7,6,5,4,7,6,5,4,7,6,1,0,1,0,7,6,5,4,3,2,5,4,3,2,5,4,5,4,5,4,3,2,1,0,7,6],
    [1,0,3,2,7,6,X,1,0,1,0,3,2,1,0,3,2,1,0,7,6,3,2,5,4,7,6,1,0,7,6,1,0,7,6,3,2,7,6,1,0,3,2,5,4],
    [3,2,1,0,1,0,_,7,6,3,2,1,0,3,2,1,0,3,2,5,4,5,4,3,2,1,0,7,6,1,0,7,6,1,0,1,0,1,0,7,6,5,4,3,2],
    [5,4,7,6,3,2,X,5,4,5,4,7,6,5,4,7,6,5,4,3,2,7,6,1,0,3,2,5,4,3,2,5,4,3,2,7,6,3,2,5,4,7,6,1,0],
    [7,6,5,4,5,4,_,3,2,7,6,5,4,7,6,5,4,7,6,1,0,1,0,7,6,5,4,3,2,5,4,3,2,5,4,5,4,5,4,3,2,1,0,7,6],
    [1,0,3,2,7,6,X,1,0,1,0,3,2,1,0,3,2,1,0,7,6,3,2,5,4,7,6,1,0,7,6,1,0,7,6,3,2,7,6,1,0,3,2,5,4],
    [3,2,1,0,1,0,_,7,6,3,2,1,0,3,2,1,0,3,2,5,4,5,4,3,2,1,0,7,6,1,0,7,6,1,0,1,0,1,0,7,6,5,4,3,2],
    [5,4,7,6,X,X,X,X,X,5,4,7,6,5,4,7,6,5,4,3,X,X,X,X,X,3,2,5,4,3,2,5,4,3,2,7,X,X,X,X,X,7,6,1,0],
    [7,6,5,4,X,_,_,_,X,7,6,5,4,7,6,5,4,7,6,2,X,_,_,_,X,5,4,3,2,5,4,3,2,5,4,6,X,_,_,_,X,1,0,7,6],
    [1,0,3,2,X,_,X,_,X,1,0,3,2,1,0,3,2,1,0,1,X,_,X,_,X,7,6,1,0,7,6,1,0,7,6,5,X,_,X,_,X,3,2,5,4],
    [3,2,1,0,X,_,_,_,X,3,2,1,0,3,2,1,0,3,2,0,X,_,_,_,X,1,0,7,6,1,0,7,6,1,0,4,X,_,_,_,X,5,4,3,2],
    [5,4,7,6,X,X,X,X,X,5,4,7,6,5,4,7,6,5,4,7,X,X,X,X,X,3,2,5,4,3,2,5,4,3,2,3,X,X,X,X,X,7,6,1,0],
    [7,6,5,4,3,2,_,5,4,7,6,5,4,7,6,5,4,7,6,6,5,7,6,1,0,5,4,3,2,5,4,3,2,5,4,2,1,3,2,5,4,1,0,7,6],
    [1,0,3,2,5,4,X,3,2,1,0,3,2,1,0,3,2,1,0,4,3,1,0,7,6,7,6,1,0,7,6,1,0,7,6,0,7,5,4,3,2,3,2,5,4],
    [3,2,1,0,7,6,_,1,0,3,2,1,0,3,2,1,0,3,2,2,1,3,2,5,4,1,0,7,6,1,0,7,6,1,0,6,5,7,6,1,0,5,4,3,2],
    [5,4,7,6,1,0,X,7,6,5,4,7,6,5,4,7,6,5,4,0,7,5,4,3,2,3,2,5,4,3,2,5,4,3,2,4,3,1,0,7,6,7,6,1,0],
    [7,6,5,4,3,2,_,5,4,7,6,5,4,7,6,5,4,7,6,6,5,7,6,1,0,5,4,3,2,5,4,3,2,5,4,2,1,3,2,5,4,1,0,7,6],
    [1,0,3,2,5,4,X,3,2,1,0,3,2,1,0,3,2,1,0,4,3,1,0,7,6,7,6,1,0,7,6,1,0,7,6,0,7,5,4,3,2,3,2,5,4],
    [3,2,1,0,7,6,_,1,0,3,2,1,0,3,2,1,0,3,2,2,1,3,2,5,4,1,0,7,6,1,0,7,6,1,0,6,5,7,6,1,0,5,4,3,2],
    [5,4,7,6,1,0,X,7,6,5,4,7,6,5,4,7,6,5,4,0,7,5,4,3,2,3,2,5,4,3,2,5,4,3,2,4,3,1,0,7,6,7,6,1,0],
    [7,6,5,4,3,2,_,5,4,7,6,5,4,7,6,5,4,7,6,6,5,7,6,1,0,5,4,3,2,5,4,3,2,5,4,2,1,3,2,5,4,1,0,7,6],
    [o,o,o,o,o,o,X,3,2,1,0,3,2,1,0,3,2,1,0,4,3,1,0,7,6,7,6,1,0,7,6,1,0,7,6,0,7,5,4,3,2,3,2,5,4],
    [o,o,o,o,o,o,_,1,0,3,2,1,0,3,2,1,0,3,2,2,1,3,2,5,4,1,0,7,6,1,0,7,6,1,0,6,5,7,6,1,0,5,4,3,2],
    [o,o,o,o,o,o,X,7,6,5,4,7,6,5,4,7,6,5,4,0,X,X,X,X,X,3,2,5,4,3,2,5,4,3,2,4,X,X,X,X,X,7,6,1,0],
    [_,_,_,_,_,_,_,_,o,7,6,5,4,7,6,5,4,7,6,7,X,_,_,_,X,5,4,3,2,5,4,3,2,5,4,3,X,_,_,_,X,1,0,7,6],
    [X,X,X,X,X,X,X,_,o,1,0,3,2,1,0,3,2,1,0,6,X,_,X,_,X,7,6,1,0,7,6,1,0,7,6,2,X,_,X,_,X,3,2,5,4],
    [X,_,_,_,_,_,X,_,o,3,2,1,0,3,2,1,0,3,2,5,X,_,_,_,X,1,0,7,6,1,0,7,6,1,0,1,X,_,_,_,X,5,4,3,2],
    [X,_,X,X,X,_,X,_,o,5,4,7,6,5,4,7,6,5,4,4,X,X,X,X,X,3,2,5,4,3,2,5,4,3,2,0,X,X,X,X,X,7,6,1,0],
    [X,_,X,X,X,_,X,_,o,7,6,5,4,7,6,5,4,7,6,3,2,5,4,3,2,5,4,3,2,5,4,3,2,5,4,7,6,1,0,7,6,1,0,7,6],
    [X,_,X,X,X,_,X,_,o,1,0,3,2,1,0,3,2,1,0,1,0,7,6,1,0,7,6,1,0,7,6,1,0,7,6,5,4,3,2,5,4,3,2,5,4],
    [X,_,_,_,_,_,X,_,o,3,2,1,0,3,2,1,0,3,2,7,6,1,0,7,6,1,0,7,6,1,0,7,6,1,0,3,2,5,4,3,2,5,4,3,2],
    [X,X,X,X,X,X,X,_,o,5,4,7,6,5,4,7,6,5,4,5,4,3,2,5,4,3,2,5,4,3,2,5,4,3,2,1,0,7,6,1,0,7,6,1,0],
 ]);
});
