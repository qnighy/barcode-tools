import { expect, test } from "vitest";
import { bitPositions, fillFunctionPatterns, pourDataBits, pourMetadataBits } from "./layout";
import { SPECS, Version, VERSIONS } from "./specs";
import { Bits } from "./bit-writer";

function getFunctionPatterns(version: Version): Uint8Array {
  const { width, height } = SPECS[version];
  const mat = new Uint8Array(width * height);
  fillFunctionPatterns(mat, version);
  return mat;
}

test("Function patterns for Version M1", () => {
  expect(getFunctionPatterns("M1")).toEqual(new Uint8Array([
    3,3,3,3,3,3,3,2,3,2,3,
    3,2,2,2,2,2,3,2,4,0,0,
    3,2,3,3,3,2,3,2,4,0,0,
    3,2,3,3,3,2,3,2,4,0,0,
    3,2,3,3,3,2,3,2,4,0,0,
    3,2,2,2,2,2,3,2,4,0,0,
    3,3,3,3,3,3,3,2,4,0,0,
    2,2,2,2,2,2,2,2,4,0,0,
    3,4,4,4,4,4,4,4,4,0,0,
    2,0,0,0,0,0,0,0,0,0,0,
    3,0,0,0,0,0,0,0,0,0,0,
  ]));
});

test("Function patterns for Version M2", () => {
  expect(getFunctionPatterns("M2")).toEqual(new Uint8Array([
   3,3,3,3,3,3,3,2,3,2,3,2,3,
   3,2,2,2,2,2,3,2,4,0,0,0,0,
   3,2,3,3,3,2,3,2,4,0,0,0,0,
   3,2,3,3,3,2,3,2,4,0,0,0,0,
   3,2,3,3,3,2,3,2,4,0,0,0,0,
   3,2,2,2,2,2,3,2,4,0,0,0,0,
   3,3,3,3,3,3,3,2,4,0,0,0,0,
   2,2,2,2,2,2,2,2,4,0,0,0,0,
   3,4,4,4,4,4,4,4,4,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,
  ]));
});

test("Function patterns for Version M3", () => {
  expect(getFunctionPatterns("M3")).toEqual(new Uint8Array([
   3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,
   3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,
   3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,
   3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,
   3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,
   3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,
   3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,
   2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,
   3,4,4,4,4,4,4,4,4,0,0,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  ]));
});

test("Function patterns for Version M4", () => {
  expect(getFunctionPatterns("M4")).toEqual(new Uint8Array([
   3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,
   3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,
   3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,
   3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,
   3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,
   3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,
   3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,
   2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,
   3,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  ]));
});

test("Function patterns for Version 1", () => {
  expect(getFunctionPatterns(1)).toEqual(new Uint8Array([
    3,3,3,3,3,3,3,2,4,0,0,0,0,2,3,3,3,3,3,3,3,
    3,2,2,2,2,2,3,2,4,0,0,0,0,2,3,2,2,2,2,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,2,3,2,3,3,3,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,2,3,2,3,3,3,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,2,3,2,3,3,3,2,3,
    3,2,2,2,2,2,3,2,4,0,0,0,0,2,3,2,2,2,2,2,3,
    3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,3,3,3,3,3,3,
    2,2,2,2,2,2,2,2,4,0,0,0,0,2,2,2,2,2,2,2,2,
    4,4,4,4,4,4,3,4,4,0,0,0,0,4,4,4,4,4,4,4,4,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,
  ]));
});

test("Function patterns for Version 2", () => {
  expect(getFunctionPatterns(2)).toEqual(new Uint8Array([
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,2,3,2,2,2,2,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,2,3,2,3,3,3,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,2,3,2,3,3,3,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,2,3,2,3,3,3,2,3,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,2,3,2,2,2,2,2,3,
    3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,3,3,3,3,3,3,
    2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,
    4,4,4,4,4,4,3,4,4,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,
    2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,3,2,3,2,3,0,0,0,0,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  ]));
});

test("Function patterns for Version 6", () => {
  expect(getFunctionPatterns(6)).toEqual(new Uint8Array([
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,2,2,2,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,3,3,3,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,3,3,3,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,3,3,3,2,3,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,2,2,2,2,3,
    3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,3,3,3,3,3,3,
    2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,
    4,4,4,4,4,4,3,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,
    2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,3,2,3,0,0,0,0,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  ]));
});

test("Function patterns for Version 7", () => {
  expect(getFunctionPatterns(7)).toEqual(new Uint8Array([
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,2,3,3,3,3,3,3,3,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,2,3,2,2,2,2,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,2,3,2,3,3,3,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,2,3,2,3,3,3,2,3,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,4,4,4,2,3,2,3,3,3,2,3,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,0,0,0,0,0,4,4,4,2,3,2,2,2,2,2,3,
    3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,3,3,3,3,3,3,
    2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,
    4,4,4,4,4,4,3,4,4,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,
    0,0,0,0,3,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,
    0,0,0,0,3,2,3,2,3,0,0,0,0,0,0,0,0,0,0,0,3,2,3,2,3,0,0,0,0,0,0,0,0,0,0,0,3,2,3,2,3,0,0,0,0,
    0,0,0,0,3,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,
    0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    4,4,4,4,4,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    4,4,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,
    2,2,2,2,2,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,0,0,0,3,2,3,2,3,0,0,0,0,0,0,0,0,0,0,0,3,2,3,2,3,0,0,0,0,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,3,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,3,3,3,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    3,2,2,2,2,2,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    3,3,3,3,3,3,3,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  ]));
});

// Cyrillics have East_Asian_Width=A,
// which U+2588/U+2592/U+2593 also have.
const cyrillic = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя";

function renderBitPositionsA(version: Version): string {
  const { width, height } = SPECS[version];
  const mat = new Uint8Array(width * height);
  fillFunctionPatterns(mat, version);
  const mat2 = Array.from({ length: height }, () => Array.from({ length: width }, () => "\u2592"));
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const byte = mat[y * width + x];
      if (byte & 4) {
        mat2[y][x] = "\u2593";
      } else if (byte & -2) {
        mat2[y][x] = byte & 1 ? "\u2588" : "\u2592";
      }
    }
  }
  let i = 0;
  for (const [x, y] of bitPositions(mat, version)) {
    mat2[y][x] = cyrillic[Math.floor(i / 8) % cyrillic.length];
    i++;
  }
  return mat2.map((row) => row.join("") + "\n").join("");
}

test("bitPositions for Version M2 (2)", () => {
  expect(renderBitPositionsA("M2")).toEqual(`\
    ███████▒█▒█▒█
    █▒▒▒▒▒█▒▓ГГВВ
    █▒███▒█▒▓ГГВВ
    █▒███▒█▒▓ГГВВ
    █▒███▒█▒▓ГГВВ
    █▒▒▒▒▒█▒▓ДДББ
    ███████▒▓ДДББ
    ▒▒▒▒▒▒▒▒▓ДДББ
    █▓▓▓▓▓▓▓▓ДДББ
    ▒ЙЙИИЗЗЖЖЕЕАА
    █ЙЙИИЗЗЖЖЕЕАА
    ▒ЙЙИИЗЗЖЖЕЕАА
    █ЙЙИИЗЗЖЖЕЕАА
  `.replace(/^\s+/gm, ""));
});

test("bitPositions for Version 7 (2)", () => {
  expect(renderBitPositionsA(7)).toEqual(`\
    ███████▒▓ббббЛЛЛЛххххееддТТТТььььз▓▓▓▒███████
    █▒▒▒▒▒█▒▓ввббММЛЛццххееддТТТТььььз▓▓▓▒█▒▒▒▒▒█
    █▒███▒█▒▓ввббММЛЛццххееддУУССээыыз▓▓▓▒█▒███▒█
    █▒███▒█▒▓ввааММККццффееддУУССээыыз▓▓▓▒█▒███▒█
    █▒███▒█▒▓ввааММККццф█████УУССээыыз▓▓▓▒█▒███▒█
    █▒▒▒▒▒█▒▓ггааННККччф█▒▒▒█УУССээыыз▓▓▓▒█▒▒▒▒▒█
    ███████▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█▒███████
    ▒▒▒▒▒▒▒▒▓ггааННККччф█▒▒▒█ФФРРююъъиизз▒▒▒▒▒▒▒▒
    ▓▓▓▓▓▓█▓▓ггЯЯННЙЙччф█████ФФРРююъъиижж▓▓▓▓▓▓▓▓
    ээээтт▒ттггЯЯННЙЙччффжжггФФРРююъъиижжШШШШЙЙИИ
    ююээтт█ттддЯЯООЙЙшшуужжггФФРРююъъиижжШШШШЙЙИИ
    ююээуу▒ссддЯЯООЙЙшшуужжггХХППяящщййжжЩЩЧЧЙЙИИ
    ююььуу█ссддЮЮООИИшшуужжггХХППяящщййееЩЩЧЧЙЙИИ
    ююььуу▒ссддЮЮООИИшшууззввХХППяящщййееЩЩЧЧККЗЗ
    яяььуу█ссееЮЮППИИщщттззввХХППяящщййееЩЩЧЧККЗЗ
    яяььфф▒ррееЮЮППИИщщттззввЦЦООААшшккееЪЪЦЦККЗЗ
    яяыыфф█ррееЭЭППЗЗщщттззввЦЦООААшшккддЪЪЦЦККЗЗ
    яяыыфф▒ррееЭЭППЗЗщщттииббЦЦООААшшккддЪЪЦЦЛЛЖЖ
    ААыыфф█рржжЭЭРРЗЗъъссииббЦЦООААшшккддЪЪЦЦЛЛЖЖ
    ААыыхх▒ппжжЭЭРРЗЗъъссииббЧЧННББччллддЫЫХХЛЛЖЖ
    ААъъ█████жжЬЬРРЖЖъъс█████ЧЧННББччллг█████ЛЛЖЖ
    ААъъ█▒▒▒█жжЬЬРРЖЖъъс█▒▒▒█ЧЧННББччллг█▒▒▒█ММЕЕ
    ББъъ█▒█▒█ззЬЬССЖЖыыс█▒█▒█ЧЧННББччллг█▒█▒█ММЕЕ
    ББъъ█▒▒▒█ззЬЬССЖЖыыс█▒▒▒█ШШММВВццммг█▒▒▒█ММЕЕ
    ББщщ█████ззЫЫССЕЕыыр█████ШШММВВццммг█████ММЕЕ
    ББщщхх▒ппззЫЫССЕЕыыррииббШШММВВццммггЫЫХХННДД
    ВВщщхх█ппииЫЫТТЕЕььррййааШШММВВццммгвЫЫХХННДД
    ВВщщхх▒ппииЫЫТТЕЕььррййааЩЩЛЛГГххннввЫЫХХННДД
    ВВшшцц█ооииЪЪТТДДььрпййааЩЩЛЛГГххннввЬЬФФННДД
    ВВшшцц▒ооииЪЪТТДДььппййааЩЩЛЛГГххннввЬЬФФООГГ
    ГГшшцц█ооййЪЪУУДДээппккЯЯЩЩЛЛГГххннвбЬЬФФООГГ
    ГГшшцц▒ооййЪЪУУДДээппккЯЯЪЪККДДффооббЬЬФФООГГ
    ГГчччч█ннййЩЩУУГГээпоккЯЯЪЪККДДффооббЭЭУУООГГ
    ГГчччч▒ннййЩЩУУГГээооккЯЯЪЪККДДффооббЭЭУУППВВ
    ▓▓▓▓▓▓█ннккЩЩФФГГююооллЮЮЪЪККДДффообаЭЭУУППВВ
    ▓▓▓▓▓▓▒ннккЩЩФФГГююооллЮЮЫЫЙЙЕЕууппааЭЭУУППВВ
    ▓▓▓▓▓▓█ммккШШФФВВююо█████ЫЫЙЙЕЕууппа█████ППВВ
    ▒▒▒▒▒▒▒▒▓ккШШФФВВююн█▒▒▒█ЫЫЙЙЕЕууппа█▒▒▒█РРББ
    ███████▒▓ллШШХХВВяян█▒█▒█ЫЫЙЙЕЕууппа█▒█▒█РРББ
    █▒▒▒▒▒█▒▓ллШШХХВВяян█▒▒▒█ЬЬИИЖЖттрра█▒▒▒█РРББ
    █▒███▒█▒▓ллЧЧХХББяян█████ЬЬИИЖЖттрра█████РРББ
    █▒███▒█▒▓ллЧЧХХББяяннллЮЮЬЬИИЖЖттррЯЯЮЮТТССАА
    █▒███▒█▒▓ммЧЧЦЦББААннллЮЮЬЬИИЖЖттррЯЯЮЮТТССАА
    █▒▒▒▒▒█▒▓ммЧЧЦЦББААммммЭЭЭЭЗЗЗЗссссЯЯЮЮТТССАА
    ███████▒▓ммЦЦЦЦААААммммЭЭЭЭЗЗЗЗссссЯЯЮЮТТССАА
  `.replace(/^\s+/gm, ""));
});

function* bitPositions2(version: Version): IterableIterator<[number, number]> {
  const { width, height } = SPECS[version];
  const mat = new Uint8Array(width * height);
  fillFunctionPatterns(mat, version);
  yield* bitPositions(mat, version);
}

for (const version of VERSIONS) {
  test(`bitPositions value range for version ${version}`, () => {
    const { width, height } = SPECS[version];
    const violations: [number, number][] = [];
    for (const [x, y] of bitPositions2(version)) {
      if (x < 0 || x >= width || y < 0 || y >= height) {
        violations.push([x, y]);
      }
    }
    expect(violations).toEqual([]);
  });

  test(`bitPositions uniqueness for version ${version}`, () => {
    const set = new Set<string>();
    const duplicated = new Set<string>();
    for (const [x, y] of bitPositions2(version)) {
      const s = `${x},${y}`;
      if (set.has(s)) {
        duplicated.add(s);
      } else {
        set.add(s);
      }
    }
    expect(duplicated).toEqual(new Set());
  });

  test(`bitPositions number match for version ${version}`, () => {
    const { dataCapacityBits } = SPECS[version];
    const count = Array.from(bitPositions2(version)).length;
    expect(count).toEqual(dataCapacityBits);
  });
}

test("pourDataBits as in Annex I QR code", () => {
  const version: Version = 1;
  const input: Bits = {
    bitLength: 208,
    bytes: new Uint8Array([
      0b00010000,
      0b00100000,
      0b00001100,
      0b01010110,
      0b01100001,
      0b10000000,
      0b11101100,
      0b00010001,
      0b11101100,
      0b00010001,
      0b11101100,
      0b00010001,
      0b11101100,
      0b00010001,
      0b11101100,
      0b00010001,
      0b10100101,
      0b00100100,
      0b11010100,
      0b11000001,
      0b11101101,
      0b00110110,
      0b11000111,
      0b10000111,
      0b00101100,
      0b01010101,
    ]),
  };

  const { width, height } = SPECS[version];
  const mat = new Uint8Array(width * height);
  fillFunctionPatterns(mat, version);
  pourDataBits(mat, version, input);

  expect(mat).toEqual(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 1, 0, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 1, 1, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 0, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 0, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4,
    1, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    1, 0, 1, 1, 0, 0, 3, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,
    1, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,
    1, 0, 0, 0, 1, 1, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,
  ]));
});

test("pourDataBits as in Annex I MicroQR code", () => {
  const version: Version = "M2";
  const input: Bits = {
    bitLength: 208,
    bytes: new Uint8Array([
      0b01000000,
      0b00011000,
      0b10101100,
      0b11000011,
      0b00000000,
      0b10000110,
      0b00001101,
      0b00100010,
      0b10101110,
      0b00110000,
    ]),
  };

  const { width, height } = SPECS[version];
  const mat = new Uint8Array(width * height);
  fillFunctionPatterns(mat, version);
  pourDataBits(mat, version, input);

  expect(mat).toEqual(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 0, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 1, 0,
    3, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0,
    2, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    3, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0,
    2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
    3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0,
  ]));
});

test("pourMetadataBits as in Annex I QR code", () => {
  const version: Version = 1;
  const mat = new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 0, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 0, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4,
    0, 0, 0, 1, 0, 1, 2, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 3, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 1, 1, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,
  ]);
  pourMetadataBits(mat, version, "M", 0b010);
  expect(mat).toEqual(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 0, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 5, 0, 0, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 5, 1, 0, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 5, 0, 1, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 5, 0, 0, 0, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 5, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
    5, 4, 5, 5, 5, 5, 3, 4, 4, 1, 0, 0, 1, 4, 5, 5, 5, 5, 5, 4, 4,
    0, 0, 0, 1, 0, 1, 2, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 3, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,
    0, 0, 0, 1, 1, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    2, 2, 2, 2, 2, 2, 2, 2, 5, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 5, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 5, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 5, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 5, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 5, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0,
  ]));
});

test("pourMetadataBits as in Annex I Micro QR code", () => {
  const version: Version = "M2";
  const mat = new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 0, 0,
    3, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 1,
    2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
    2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0,
    3, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1,
  ]);
  pourMetadataBits(mat, version, "L", 0b01);
  expect(mat).toEqual(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 5, 1, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 5, 1, 1, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 5, 0, 0, 0, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 0, 0,
    3, 5, 4, 5, 4, 4, 4, 4, 5, 0, 0, 0, 1,
    2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
    2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0,
    3, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1,
  ]));
});
