import { expect, test } from "vitest";
import { fillFunctionPatterns } from "./layout";
import { applyMask, evaluateMask } from "./mask";
import { SPECS, Version } from "./specs";

function renderMaskPattern(version: Version, mask: number): string {
  const { width } = SPECS[version];
  const height = width;
  const mat = new Uint8Array(width * height);
  fillFunctionPatterns(mat, version);
  applyMask(mat, version, mask);
  const mat2 = Array.from({ length: height }, (_, y) => Array.from({ length: width }, (_, x): string => {
    const byte = mat[y * width + x];
    return byte & 1 ? "\u2588" : "\u2592";
  }));
  return mat2.map((row) => row.join("") + "\n").join("");
}

test("mask pattern 000 for version 1", () => {
  expect(renderMaskPattern(1, 0b000)).toEqual(`\
    ███████▒▒▒█▒█▒███████
    █▒▒▒▒▒█▒▒█▒█▒▒█▒▒▒▒▒█
    █▒███▒█▒▒▒█▒█▒█▒███▒█
    █▒███▒█▒▒█▒█▒▒█▒███▒█
    █▒███▒█▒▒▒█▒█▒█▒███▒█
    █▒▒▒▒▒█▒▒█▒█▒▒█▒▒▒▒▒█
    ███████▒█▒█▒█▒███████
    ▒▒▒▒▒▒▒▒▒█▒█▒▒▒▒▒▒▒▒▒
    ▒▒▒▒▒▒█▒▒▒█▒█▒▒▒▒▒▒▒▒
    ▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█▒
    █▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█
    ▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█▒
    █▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█
    ▒▒▒▒▒▒▒▒▒█▒█▒█▒█▒█▒█▒
    ███████▒▒▒█▒█▒█▒█▒█▒█
    █▒▒▒▒▒█▒▒█▒█▒█▒█▒█▒█▒
    █▒███▒█▒▒▒█▒█▒█▒█▒█▒█
    █▒███▒█▒▒█▒█▒█▒█▒█▒█▒
    █▒███▒█▒▒▒█▒█▒█▒█▒█▒█
    █▒▒▒▒▒█▒▒█▒█▒█▒█▒█▒█▒
    ███████▒▒▒█▒█▒█▒█▒█▒█
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 001 for version 1", () => {
  expect(renderMaskPattern(1, 0b001)).toEqual(`\
    ███████▒▒████▒███████
    █▒▒▒▒▒█▒▒▒▒▒▒▒█▒▒▒▒▒█
    █▒███▒█▒▒████▒█▒███▒█
    █▒███▒█▒▒▒▒▒▒▒█▒███▒█
    █▒███▒█▒▒████▒█▒███▒█
    █▒▒▒▒▒█▒▒▒▒▒▒▒█▒▒▒▒▒█
    ███████▒█▒█▒█▒███████
    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    ▒▒▒▒▒▒█▒▒████▒▒▒▒▒▒▒▒
    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    █████████████████████
    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    █████████████████████
    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    ███████▒▒████████████
    █▒▒▒▒▒█▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    █▒███▒█▒▒████████████
    █▒███▒█▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    █▒███▒█▒▒████████████
    █▒▒▒▒▒█▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    ███████▒▒████████████
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 010 for version 1", () => {
  expect(renderMaskPattern(1, 0b010)).toEqual(`\
    ███████▒▒█▒▒█▒███████
    █▒▒▒▒▒█▒▒█▒▒█▒█▒▒▒▒▒█
    █▒███▒█▒▒█▒▒█▒█▒███▒█
    █▒███▒█▒▒█▒▒█▒█▒███▒█
    █▒███▒█▒▒█▒▒█▒█▒███▒█
    █▒▒▒▒▒█▒▒█▒▒█▒█▒▒▒▒▒█
    ███████▒█▒█▒█▒███████
    ▒▒▒▒▒▒▒▒▒█▒▒█▒▒▒▒▒▒▒▒
    ▒▒▒▒▒▒█▒▒█▒▒█▒▒▒▒▒▒▒▒
    █▒▒█▒▒▒▒▒█▒▒█▒▒█▒▒█▒▒
    █▒▒█▒▒█▒▒█▒▒█▒▒█▒▒█▒▒
    █▒▒█▒▒▒▒▒█▒▒█▒▒█▒▒█▒▒
    █▒▒█▒▒█▒▒█▒▒█▒▒█▒▒█▒▒
    ▒▒▒▒▒▒▒▒▒█▒▒█▒▒█▒▒█▒▒
    ███████▒▒█▒▒█▒▒█▒▒█▒▒
    █▒▒▒▒▒█▒▒█▒▒█▒▒█▒▒█▒▒
    █▒███▒█▒▒█▒▒█▒▒█▒▒█▒▒
    █▒███▒█▒▒█▒▒█▒▒█▒▒█▒▒
    █▒███▒█▒▒█▒▒█▒▒█▒▒█▒▒
    █▒▒▒▒▒█▒▒█▒▒█▒▒█▒▒█▒▒
    ███████▒▒█▒▒█▒▒█▒▒█▒▒
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 011 for version 1", () => {
  expect(renderMaskPattern(1, 0b011)).toEqual(`\
    ███████▒▒█▒▒█▒███████
    █▒▒▒▒▒█▒▒▒▒█▒▒█▒▒▒▒▒█
    █▒███▒█▒▒▒█▒▒▒█▒███▒█
    █▒███▒█▒▒█▒▒█▒█▒███▒█
    █▒███▒█▒▒▒▒█▒▒█▒███▒█
    █▒▒▒▒▒█▒▒▒█▒▒▒█▒▒▒▒▒█
    ███████▒█▒█▒█▒███████
    ▒▒▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
    ▒▒▒▒▒▒█▒▒▒█▒▒▒▒▒▒▒▒▒▒
    █▒▒█▒▒▒▒▒█▒▒█▒▒█▒▒█▒▒
    ▒▒█▒▒██▒█▒▒█▒▒█▒▒█▒▒█
    ▒█▒▒█▒▒█▒▒█▒▒█▒▒█▒▒█▒
    █▒▒█▒▒█▒▒█▒▒█▒▒█▒▒█▒▒
    ▒▒▒▒▒▒▒▒▒▒▒█▒▒█▒▒█▒▒█
    ███████▒▒▒█▒▒█▒▒█▒▒█▒
    █▒▒▒▒▒█▒▒█▒▒█▒▒█▒▒█▒▒
    █▒███▒█▒▒▒▒█▒▒█▒▒█▒▒█
    █▒███▒█▒▒▒█▒▒█▒▒█▒▒█▒
    █▒███▒█▒▒█▒▒█▒▒█▒▒█▒▒
    █▒▒▒▒▒█▒▒▒▒█▒▒█▒▒█▒▒█
    ███████▒▒▒█▒▒█▒▒█▒▒█▒
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 100 for version 1", () => {
  expect(renderMaskPattern(1, 0b100)).toEqual(`\
    ███████▒▒▒▒▒█▒███████
    █▒▒▒▒▒█▒▒▒▒▒█▒█▒▒▒▒▒█
    █▒███▒█▒▒███▒▒█▒███▒█
    █▒███▒█▒▒███▒▒█▒███▒█
    █▒███▒█▒▒▒▒▒█▒█▒███▒█
    █▒▒▒▒▒█▒▒▒▒▒█▒█▒▒▒▒▒█
    ███████▒█▒█▒█▒███████
    ▒▒▒▒▒▒▒▒▒███▒▒▒▒▒▒▒▒▒
    ▒▒▒▒▒▒█▒▒▒▒▒█▒▒▒▒▒▒▒▒
    ███▒▒▒▒██▒▒▒███▒▒▒███
    ▒▒▒████▒▒███▒▒▒███▒▒▒
    ▒▒▒███▒▒▒███▒▒▒███▒▒▒
    ███▒▒▒███▒▒▒███▒▒▒███
    ▒▒▒▒▒▒▒▒▒▒▒▒███▒▒▒███
    ███████▒▒███▒▒▒███▒▒▒
    █▒▒▒▒▒█▒▒███▒▒▒███▒▒▒
    █▒███▒█▒▒▒▒▒███▒▒▒███
    █▒███▒█▒▒▒▒▒███▒▒▒███
    █▒███▒█▒▒███▒▒▒███▒▒▒
    █▒▒▒▒▒█▒▒███▒▒▒███▒▒▒
    ███████▒▒▒▒▒███▒▒▒███
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 101 for version 1", () => {
  expect(renderMaskPattern(1, 0b101)).toEqual(`\
    ███████▒▒████▒███████
    █▒▒▒▒▒█▒▒▒▒▒█▒█▒▒▒▒▒█
    █▒███▒█▒▒█▒▒█▒█▒███▒█
    █▒███▒█▒▒▒█▒█▒█▒███▒█
    █▒███▒█▒▒█▒▒█▒█▒███▒█
    █▒▒▒▒▒█▒▒▒▒▒█▒█▒▒▒▒▒█
    ███████▒█▒█▒█▒███████
    ▒▒▒▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒
    ▒▒▒▒▒▒█▒▒█▒▒█▒▒▒▒▒▒▒▒
    █▒█▒█▒▒▒█▒█▒█▒█▒█▒█▒█
    █▒▒█▒▒█▒▒█▒▒█▒▒█▒▒█▒▒
    █▒▒▒▒▒▒▒▒▒▒▒█▒▒▒▒▒█▒▒
    █████████████████████
    ▒▒▒▒▒▒▒▒▒▒▒▒█▒▒▒▒▒█▒▒
    ███████▒▒█▒▒█▒▒█▒▒█▒▒
    █▒▒▒▒▒█▒▒▒█▒█▒█▒█▒█▒█
    █▒███▒█▒▒█▒▒█▒▒█▒▒█▒▒
    █▒███▒█▒▒▒▒▒█▒▒▒▒▒█▒▒
    █▒███▒█▒▒████████████
    █▒▒▒▒▒█▒▒▒▒▒█▒▒▒▒▒█▒▒
    ███████▒▒█▒▒█▒▒█▒▒█▒▒
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 110 for version 1", () => {
  expect(renderMaskPattern(1, 0b110)).toEqual(`\
    ███████▒▒████▒███████
    █▒▒▒▒▒█▒▒▒▒▒█▒█▒▒▒▒▒█
    █▒███▒█▒▒██▒█▒█▒███▒█
    █▒███▒█▒▒▒█▒█▒█▒███▒█
    █▒███▒█▒▒█▒██▒█▒███▒█
    █▒▒▒▒▒█▒▒▒███▒█▒▒▒▒▒█
    ███████▒█▒█▒█▒███████
    ▒▒▒▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒
    ▒▒▒▒▒▒█▒▒██▒█▒▒▒▒▒▒▒▒
    █▒█▒█▒▒▒█▒█▒█▒█▒█▒█▒█
    █▒██▒██▒██▒██▒██▒██▒█
    █▒▒▒██▒▒▒▒███▒▒▒███▒▒
    █████████████████████
    ▒▒▒▒▒▒▒▒▒▒▒▒███▒▒▒███
    ███████▒▒██▒██▒██▒██▒
    █▒▒▒▒▒█▒▒▒█▒█▒█▒█▒█▒█
    █▒███▒█▒▒█▒██▒██▒██▒█
    █▒███▒█▒▒▒███▒▒▒███▒▒
    █▒███▒█▒▒████████████
    █▒▒▒▒▒█▒▒▒▒▒███▒▒▒███
    ███████▒▒██▒██▒██▒██▒
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 111 for version 1", () => {
  expect(renderMaskPattern(1, 0b111)).toEqual(`\
    ███████▒▒▒█▒█▒███████
    █▒▒▒▒▒█▒▒███▒▒█▒▒▒▒▒█
    █▒███▒█▒▒▒███▒█▒███▒█
    █▒███▒█▒▒█▒█▒▒█▒███▒█
    █▒███▒█▒▒▒▒▒█▒█▒███▒█
    █▒▒▒▒▒█▒▒█▒▒▒▒█▒▒▒▒▒█
    ███████▒█▒█▒█▒███████
    ▒▒▒▒▒▒▒▒▒███▒▒▒▒▒▒▒▒▒
    ▒▒▒▒▒▒█▒▒▒███▒▒▒▒▒▒▒▒
    ▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█▒
    ███▒▒▒███▒▒▒███▒▒▒███
    ▒███▒▒▒███▒▒▒███▒▒▒██
    █▒█▒█▒█▒█▒█▒█▒█▒█▒█▒█
    ▒▒▒▒▒▒▒▒▒███▒▒▒███▒▒▒
    ███████▒▒▒███▒▒▒███▒▒
    █▒▒▒▒▒█▒▒█▒█▒█▒█▒█▒█▒
    █▒███▒█▒▒▒▒▒███▒▒▒███
    █▒███▒█▒▒█▒▒▒███▒▒▒██
    █▒███▒█▒▒▒█▒█▒█▒█▒█▒█
    █▒▒▒▒▒█▒▒███▒▒▒███▒▒▒
    ███████▒▒▒███▒▒▒███▒▒
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 00 for version M4", () => {
  expect(renderMaskPattern("M4", 0b00)).toEqual(`\
    ███████▒█▒█▒█▒█▒█
    █▒▒▒▒▒█▒▒▒▒▒▒▒▒▒▒
    █▒███▒█▒▒████████
    █▒███▒█▒▒▒▒▒▒▒▒▒▒
    █▒███▒█▒▒████████
    █▒▒▒▒▒█▒▒▒▒▒▒▒▒▒▒
    ███████▒▒████████
    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    █▒▒▒▒▒▒▒▒████████
    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    █████████████████
    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    █████████████████
    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    █████████████████
    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
    █████████████████
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 01 for version M4", () => {
  expect(renderMaskPattern("M4", 0b01)).toEqual(`\
    ███████▒█▒█▒█▒█▒█
    █▒▒▒▒▒█▒▒▒▒▒███▒▒
    █▒███▒█▒▒███▒▒▒██
    █▒███▒█▒▒███▒▒▒██
    █▒███▒█▒▒▒▒▒███▒▒
    █▒▒▒▒▒█▒▒▒▒▒███▒▒
    ███████▒▒███▒▒▒██
    ▒▒▒▒▒▒▒▒▒███▒▒▒██
    █▒▒▒▒▒▒▒▒▒▒▒███▒▒
    ▒██▒▒▒███▒▒▒███▒▒
    █▒▒███▒▒▒███▒▒▒██
    ▒▒▒███▒▒▒███▒▒▒██
    ███▒▒▒███▒▒▒███▒▒
    ▒██▒▒▒███▒▒▒███▒▒
    █▒▒███▒▒▒███▒▒▒██
    ▒▒▒███▒▒▒███▒▒▒██
    ███▒▒▒███▒▒▒███▒▒
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 10 for version M4", () => {
  expect(renderMaskPattern("M4", 0b10)).toEqual(`\
    ███████▒█▒█▒█▒█▒█
    █▒▒▒▒▒█▒▒▒▒▒███▒▒
    █▒███▒█▒▒██▒██▒██
    █▒███▒█▒▒▒█▒█▒█▒█
    █▒███▒█▒▒█▒██▒██▒
    █▒▒▒▒▒█▒▒▒███▒▒▒█
    ███████▒▒████████
    ▒▒▒▒▒▒▒▒▒▒▒▒███▒▒
    █▒▒▒▒▒▒▒▒██▒██▒██
    ▒▒█▒█▒█▒█▒█▒█▒█▒█
    █▒██▒██▒██▒██▒██▒
    ▒▒▒▒███▒▒▒███▒▒▒█
    █████████████████
    ▒██▒▒▒███▒▒▒███▒▒
    ██▒██▒██▒██▒██▒██
    ▒▒█▒█▒█▒█▒█▒█▒█▒█
    █▒██▒██▒██▒██▒██▒
  `.replace(/^\s+/gm, ""));
});

test("mask pattern 11 for version M4", () => {
  expect(renderMaskPattern("M4", 0b11)).toEqual(`\
    ███████▒█▒█▒█▒█▒█
    █▒▒▒▒▒█▒▒███▒▒▒██
    █▒███▒█▒▒▒███▒▒▒█
    █▒███▒█▒▒█▒█▒█▒█▒
    █▒███▒█▒▒▒▒▒███▒▒
    █▒▒▒▒▒█▒▒█▒▒▒███▒
    ███████▒▒▒█▒█▒█▒█
    ▒▒▒▒▒▒▒▒▒███▒▒▒██
    █▒▒▒▒▒▒▒▒▒███▒▒▒█
    ▒█▒█▒█▒█▒█▒█▒█▒█▒
    ███▒▒▒███▒▒▒███▒▒
    ▒███▒▒▒███▒▒▒███▒
    █▒█▒█▒█▒█▒█▒█▒█▒█
    ▒▒▒███▒▒▒███▒▒▒██
    █▒▒▒███▒▒▒███▒▒▒█
    ▒█▒█▒█▒█▒█▒█▒█▒█▒
    ███▒▒▒███▒▒▒███▒▒
  `.replace(/^\s+/gm, ""));
});

test("QR mask evaluation (good - checker pattern)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 1, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 0, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 1, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 1, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4,
    0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1, 0, 1, 0, 1, 0, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
  ]), 1);
  // Minimal penalty: -269
  // - Finder pattern:
  //   - 7x7 consecutive: 60
  //   - 5x5 consecutive: 36
  //   - 3x3 having 2x2: 36
  //   - (Pseudo-finder: 720: discounted)
  // - Separator + format info:
  //   - consecutive: 60
  //     - length 9: 4
  //     - length 8: 4
  //     - length 6: 2
  //   - having 2x2: 72
  //     - rectangle 6x2: 2
  //     - rectangle 8x2: 2

  expect(score).toEqual(-269);
});

test("QR mask evaluation (bad - vertical stripes)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 1, 0, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 1, 0, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 1, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4,
    1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    1, 0, 1, 0, 1, 0, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    1, 0, 1, 0, 1, 0, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
  ]), 1);
  expect(score).toEqual(-493);
});

test("QR mask evaluation (bad - horizontal stripes)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4,
    0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  ]), 1);
  expect(score).toEqual(-493);
});

test("QR mask evaluation (bad - 3x3 blocks)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 1, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4,
    0, 0, 0, 1, 1, 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
    0, 0, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
    0, 0, 0, 1, 1, 1, 2, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
    1, 1, 1, 0, 0, 0, 3, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1,
  ]), 1);
  expect(score).toEqual(-627);
});

test("QR mask evaluation (bad - 2x2 blocks)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 0, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 0, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 0, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4,
    0, 1, 1, 0, 0, 1, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
    0, 1, 1, 0, 0, 1, 3, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
    1, 0, 0, 1, 1, 0, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
    1, 0, 0, 1, 1, 0, 3, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
  ]), 1);
  expect(score).toEqual(-445);
});

test("QR mask evaluation (bad - 2x2 dark blocks)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 1, 1, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 0, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4,
    0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    1, 1, 0, 1, 1, 0, 3, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
    1, 1, 0, 1, 1, 0, 2, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,
  ]), 1);
  expect(score).toEqual(-480);
});

test("QR mask evaluation (bad - 2x2 light blocks)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 0, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 0, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 0, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 1, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 1, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4,
    1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,
    0, 0, 1, 0, 0, 1, 3, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
  ]), 1);
  expect(score).toEqual(-364);
});

test("QR mask evaluation (bad - pseudo finders)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 1, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 1, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4,
    0, 1, 0, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0,
    1, 0, 1, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1,
    0, 1, 0, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0,
    1, 0, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,
  ]), 1);
  expect(score).toEqual(-1310);
});

test("QR mask evaluation (bad - too many 0s)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4,
    0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ]), 1);
  expect(score).toEqual(-1345);
});

test("QR mask evaluation (bad - too many 1s)", () => {
  const score = evaluateMask(new Uint8Array([
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 3, 3, 3, 2, 3,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 2, 3,
    3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
    4, 4, 4, 4, 4, 4, 3, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4,
    1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 2, 3, 3, 3, 2, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 2, 2, 2, 2, 2, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    3, 3, 3, 3, 3, 3, 3, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  ]), 1);
  expect(score).toEqual(-1096);
});
