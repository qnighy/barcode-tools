import { expect } from "vitest";
import { fc, test } from "@fast-check/vitest";
import { LOG_ZERO } from "./gf256";
import { correctErrors, POLYNOMIALS, RSPolynomial } from "./poly";

function stringifyPolynomial(poly: RSPolynomial): string {
  const degree = poly.nonLeadingLogCoefficients.length;
  const terms: string[] = [stringifyPower("x", degree)];
  for (let i = degree - 1; i >= 0; i--) {
    const logCoeff = poly.nonLeadingLogCoefficients[i];
    if (logCoeff === LOG_ZERO) {
      continue;
    }
    if (i === 0) {
      terms.push(stringifyPower("α", logCoeff));
    } else if (logCoeff === 0) {
      terms.push(stringifyPower("x", i));
    } else {
      terms.push(`${stringifyPower("α", logCoeff)}${stringifyPower("x", i)}`);
    }
  }
  return terms.join(" + ");
}

function stringifyPower(base: string, exponent: number): string {
  return exponent === 1 ? base : `${base}${superscriptify(exponent)}`;
}

function superscriptify(x: number): string {
  const superscripts = "⁰¹²³⁴⁵⁶⁷⁸⁹";
  return x
    .toString()
    .split("")
    .map((digit) => superscripts[Number(digit)])
    .join("");
}

test("POLYNOMIALS matches against Table A.1", () => {
  type Row = [
    numEccBytes: number,
    polynomial: string,
  ];
  const rowIndexes = [
    2, 5, 6, 7, 8, 10, 13, 14, 15, 16, 17, 18, 20, 22,
    24, 26, 28, 30, 32, 34, 36, 40, 42,
    44, 46, 48, 50, 52, 54, 56,
    58, 60, 62, 64, 66, 68
  ];
  const actual: Row[] = rowIndexes.map((numEccBytes) => [
    numEccBytes,
    stringifyPolynomial(POLYNOMIALS[numEccBytes])
  ]);
  const expected: Row[] = [
    [ 2, "x² + α²⁵x + α"],
    [ 5, "x⁵ + α¹¹³x⁴ + α¹⁶⁴x³ + α¹⁶⁶x² + α¹¹⁹x + α¹⁰"],
    [ 6, "x⁶ + α¹⁶⁶x⁵ + x⁴ + α¹³⁴x³ + α⁵x² + α¹⁷⁶x + α¹⁵"],
    [ 7, "x⁷ + α⁸⁷x⁶ + α²²⁹x⁵ + α¹⁴⁶x⁴ + α¹⁴⁹x³ + α²³⁸x² + α¹⁰²x + α²¹"],
    [ 8, "x⁸ + α¹⁷⁵x⁷ + α²³⁸x⁶ + α²⁰⁸x⁵ + α²⁴⁹x⁴ + α²¹⁵x³ + α²⁵²x² + α¹⁹⁶x + α²⁸"],
    [10, "x¹⁰ + α²⁵¹x⁹ + α⁶⁷x⁸ + α⁴⁶x⁷ + α⁶¹x⁶ + α¹¹⁸x⁵ + α⁷⁰x⁴ + α⁶⁴x³ + α⁹⁴x² + α³²x + α⁴⁵"],
    [13, "x¹³ + α⁷⁴x¹² + α¹⁵²x¹¹ + α¹⁷⁶x¹⁰ + α¹⁰⁰x⁹ + α⁸⁶x⁸ + α¹⁰⁰x⁷ + α¹⁰⁶x⁶ + α¹⁰⁴x⁵ + α¹³⁰x⁴ + α²¹⁸x³ + α²⁰⁶x² + α¹⁴⁰x + α⁷⁸"],
    [14, "x¹⁴ + α¹⁹⁹x¹³ + α²⁴⁹x¹² + α¹⁵⁵x¹¹ + α⁴⁸x¹⁰ + α¹⁹⁰x⁹ + α¹²⁴x⁸ + α²¹⁸x⁷ + α¹³⁷x⁶ + α²¹⁶x⁵ + α⁸⁷x⁴ + α²⁰⁷x³ + α⁵⁹x² + α²²x + α⁹¹"],
    [15, "x¹⁵ + α⁸x¹⁴ + α¹⁸³x¹³ + α⁶¹x¹² + α⁹¹x¹¹ + α²⁰²x¹⁰ + α³⁷x⁹ + α⁵¹x⁸ + α⁵⁸x⁷ + α⁵⁸x⁶ + α²³⁷x⁵ + α¹⁴⁰x⁴ + α¹²⁴x³ + α⁵x² + α⁹⁹x + α¹⁰⁵"],
    [16, "x¹⁶ + α¹²⁰x¹⁵ + α¹⁰⁴x¹⁴ + α¹⁰⁷x¹³ + α¹⁰⁹x¹² + α¹⁰²x¹¹ + α¹⁶¹x¹⁰ + α⁷⁶x⁹ + α³x⁸ + α⁹¹x⁷ + α¹⁹¹x⁶ + α¹⁴⁷x⁵ + α¹⁶⁹x⁴ + α¹⁸²x³ + α¹⁹⁴x² + α²²⁵x + α¹²⁰"],
    [17, "x¹⁷ + α⁴³x¹⁶ + α¹³⁹x¹⁵ + α²⁰⁶x¹⁴ + α⁷⁸x¹³ + α⁴³x¹² + α²³⁹x¹¹ + α¹²³x¹⁰ + α²⁰⁶x⁹ + α²¹⁴x⁸ + α¹⁴⁷x⁷ + α²⁴x⁶ + α⁹⁹x⁵ + α¹⁵⁰x⁴ + α³⁹x³ + α²⁴³x² + α¹⁶³x + α¹³⁶"],
    [18, "x¹⁸ + α²¹⁵x¹⁷ + α²³⁴x¹⁶ + α¹⁵⁸x¹⁵ + α⁹⁴x¹⁴ + α¹⁸⁴x¹³ + α⁹⁷x¹² + α¹¹⁸x¹¹ + α¹⁷⁰x¹⁰ + α⁷⁹x⁹ + α¹⁸⁷x⁸ + α¹⁵²x⁷ + α¹⁴⁸x⁶ + α²⁵²x⁵ + α¹⁷⁹x⁴ + α⁵x³ + α⁹⁸x² + α⁹⁶x + α¹⁵³"],
    [20, "x²⁰ + α¹⁷x¹⁹ + α⁶⁰x¹⁸ + α⁷⁹x¹⁷ + α⁵⁰x¹⁶ + α⁶¹x¹⁵ + α¹⁶³x¹⁴ + α²⁶x¹³ + α¹⁸⁷x¹² + α²⁰²x¹¹ + α¹⁸⁰x¹⁰ + α²²¹x⁹ + α²²⁵x⁸ + α⁸³x⁷ + α²³⁹x⁶ + α¹⁵⁶x⁵ + α¹⁶⁴x⁴ + α²¹²x³ + α²¹²x² + α¹⁸⁸x + α¹⁹⁰"],
    [22, "x²² + α²¹⁰x²¹ + α¹⁷¹x²⁰ + α²⁴⁷x¹⁹ + α²⁴²x¹⁸ + α⁹³x¹⁷ + α²³⁰x¹⁶ + α¹⁴x¹⁵ + α¹⁰⁹x¹⁴ + α²²¹x¹³ + α⁵³x¹² + α²⁰⁰x¹¹ + α⁷⁴x¹⁰ + α⁸x⁹ + α¹⁷²x⁸ + α⁹⁸x⁷ + α⁸⁰x⁶ + α²¹⁹x⁵ + α¹³⁴x⁴ + α¹⁶⁰x³ + α¹⁰⁵x² + α¹⁶⁵x + α²³¹"],
    [24, "x²⁴ + α²²⁹x²³ + α¹²¹x²² + α¹³⁵x²¹ + α⁴⁸x²⁰ + α²¹¹x¹⁹ + α¹¹⁷x¹⁸ + α²⁵¹x¹⁷ + α¹²⁶x¹⁶ + α¹⁵⁹x¹⁵ + α¹⁸⁰x¹⁴ + α¹⁶⁹x¹³ + α¹⁵²x¹² + α¹⁹²x¹¹ + α²²⁶x¹⁰ + α²²⁸x⁹ + α²¹⁸x⁸ + α¹¹¹x⁷ + x⁶ + α¹¹⁷x⁵ + α²³²x⁴ + α⁸⁷x³ + α⁹⁶x² + α²²⁷x + α²¹"],
    [26, "x²⁶ + α¹⁷³x²⁵ + α¹²⁵x²⁴ + α¹⁵⁸x²³ + α²x²² + α¹⁰³x²¹ + α¹⁸²x²⁰ + α¹¹⁸x¹⁹ + α¹⁷x¹⁸ + α¹⁴⁵x¹⁷ + α²⁰¹x¹⁶ + α¹¹¹x¹⁵ + α²⁸x¹⁴ + α¹⁶⁵x¹³ + α⁵³x¹² + α¹⁶¹x¹¹ + α²¹x¹⁰ + α²⁴⁵x⁹ + α¹⁴²x⁸ + α¹³x⁷ + α¹⁰²x⁶ + α⁴⁸x⁵ + α²²⁷x⁴ + α¹⁵³x³ + α¹⁴⁵x² + α²¹⁸x + α⁷⁰"],
    [28, "x²⁸ + α¹⁶⁸x²⁷ + α²²³x²⁶ + α²⁰⁰x²⁵ + α¹⁰⁴x²⁴ + α²²⁴x²³ + α²³⁴x²² + α¹⁰⁸x²¹ + α¹⁸⁰x²⁰ + α¹¹⁰x¹⁹ + α¹⁹⁰x¹⁸ + α¹⁹⁵x¹⁷ + α¹⁴⁷x¹⁶ + α²⁰⁵x¹⁵ + α²⁷x¹⁴ + α²³²x¹³ + α²⁰¹x¹² + α²¹x¹¹ + α⁴³x¹⁰ + α²⁴⁵x⁹ + α⁸⁷x⁸ + α⁴²x⁷ + α¹⁹⁵x⁶ + α²¹²x⁵ + α¹¹⁹x⁴ + α²⁴²x³ + α³⁷x² + α⁹x + α¹²³"],
    [30, "x³⁰ + α⁴¹x²⁹ + α¹⁷³x²⁸ + α¹⁴⁵x²⁷ + α¹⁵²x²⁶ + α²¹⁶x²⁵ + α³¹x²⁴ + α¹⁷⁹x²³ + α¹⁸²x²² + α⁵⁰x²¹ + α⁴⁸x²⁰ + α¹¹⁰x¹⁹ + α⁸⁶x¹⁸ + α²³⁹x¹⁷ + α⁹⁶x¹⁶ + α²²²x¹⁵ + α¹²⁵x¹⁴ + α⁴²x¹³ + α¹⁷³x¹² + α²²⁶x¹¹ + α¹⁹³x¹⁰ + α²²⁴x⁹ + α¹³⁰x⁸ + α¹⁵⁶x⁷ + α³⁷x⁶ + α²⁵¹x⁵ + α²¹⁶x⁴ + α²³⁸x³ + α⁴⁰x² + α¹⁹²x + α¹⁸⁰"],
    [32, "x³² + α¹⁰x³¹ + α⁶x³⁰ + α¹⁰⁶x²⁹ + α¹⁹⁰x²⁸ + α²⁴⁹x²⁷ + α¹⁶⁷x²⁶ + α⁴x²⁵ + α⁶⁷x²⁴ + α²⁰⁹x²³ + α¹³⁸x²² + α¹³⁸x²¹ + α³²x²⁰ + α²⁴²x¹⁹ + α¹²³x¹⁸ + α⁸⁹x¹⁷ + α²⁷x¹⁶ + α¹²⁰x¹⁵ + α¹⁸⁵x¹⁴ + α⁸⁰x¹³ + α¹⁵⁶x¹² + α³⁸x¹¹ + α⁶⁹x¹⁰ + α¹⁷¹x⁹ + α⁶⁰x⁸ + α²⁸x⁷ + α²²²x⁶ + α⁸⁰x⁵ + α⁵²x⁴ + α²⁵⁴x³ + α¹⁸⁵x² + α²²⁰x + α²⁴¹"],
    [34, "x³⁴ + α¹¹¹x³³ + α⁷⁷x³² + α¹⁴⁶x³¹ + α⁹⁴x³⁰ + α²⁶x²⁹ + α²¹x²⁸ + α¹⁰⁸x²⁷ + α¹⁹x²⁶ + α¹⁰⁵x²⁵ + α⁹⁴x²⁴ + α¹¹³x²³ + α¹⁹³x²² + α⁸⁶x²¹ + α¹⁴⁰x²⁰ + α¹⁶³x¹⁹ + α¹²⁵x¹⁸ + α⁵⁸x¹⁷ + α¹⁵⁸x¹⁶ + α²²⁹x¹⁵ + α²³⁹x¹⁴ + α²¹⁸x¹³ + α¹⁰³x¹² + α⁵⁶x¹¹ + α⁷⁰x¹⁰ + α¹¹⁴x⁹ + α⁶¹x⁸ + α¹⁸³x⁷ + α¹²⁹x⁶ + α¹⁶⁷x⁵ + α¹³x⁴ + α⁹⁸x³ + α⁶²x² + α¹²⁹x + α⁵¹"],
    [36, "x³⁶ + α²⁰⁰x³⁵ + α¹⁸³x³⁴ + α⁹⁸x³³ + α¹⁶x³² + α¹⁷²x³¹ + α³¹x³⁰ + α²⁴⁶x²⁹ + α²³⁴x²⁸ + α⁶⁰x²⁷ + α¹⁵²x²⁶ + α¹¹⁵x²⁵ + x²⁴ + α¹⁶⁷x²³ + α¹⁵²x²² + α¹¹³x²¹ + α²⁴⁸x²⁰ + α²³⁸x¹⁹ + α¹⁰⁷x¹⁸ + α¹⁸x¹⁷ + α⁶³x¹⁶ + α²¹⁸x¹⁵ + α³⁷x¹⁴ + α⁸⁷x¹³ + α²¹⁰x¹² + α¹⁰⁵x¹¹ + α¹⁷⁷x¹⁰ + α¹²⁰x⁹ + α⁷⁴x⁸ + α¹²¹x⁷ + α¹⁹⁶x⁶ + α¹¹⁷x⁵ + α²⁵¹x⁴ + α¹¹³x³ + α²³³x² + α³⁰x + α¹²⁰"],
    [40, "x⁴⁰ + α⁵⁹x³⁹ + α¹¹⁶x³⁸ + α⁷⁹x³⁷ + α¹⁶¹x³⁶ + α²⁵²x³⁵ + α⁹⁸x³⁴ + α¹²⁸x³³ + α²⁰⁵x³² + α¹²⁸x³¹ + α¹⁶¹x³⁰ + α²⁴⁷x²⁹ + α⁵⁷x²⁸ + α¹⁶³x²⁷ + α⁵⁶x²⁶ + α²³⁵x²⁵ + α¹⁰⁶x²⁴ + α⁵³x²³ + α²⁶x²² + α¹⁸⁷x²¹ + α¹⁷⁴x²⁰ + α²²⁶x¹⁹ + α¹⁰⁴x¹⁸ + α¹⁷⁰x¹⁷ + α⁷x¹⁶ + α¹⁷⁵x¹⁵ + α³⁵x¹⁴ + α¹⁸¹x¹³ + α¹¹⁴x¹² + α⁸⁸x¹¹ + α⁴¹x¹⁰ + α⁴⁷x⁹ + α¹⁶³x⁸ + α¹²⁵x⁷ + α¹³⁴x⁶ + α⁷²x⁵ + α²⁰x⁴ + α²³²x³ + α⁵³x² + α³⁵x + α¹⁵"],
    [42, "x⁴² + α²⁵⁰x⁴¹ + α¹⁰³x⁴⁰ + α²²¹x³⁹ + α²³⁰x³⁸ + α²⁵x³⁷ + α¹⁸x³⁶ + α¹³⁷x³⁵ + α²³¹x³⁴ + x³³ + α³x³² + α⁵⁸x³¹ + α²⁴²x³⁰ + α²²¹x²⁹ + α¹⁹¹x²⁸ + α¹¹⁰x²⁷ + α⁸⁴x²⁶ + α²³⁰x²⁵ + α⁸x²⁴ + α¹⁸⁸x²³ + α¹⁰⁶x²² + α⁹⁶x²¹ + α¹⁴⁷x²⁰ + α¹⁵x¹⁹ + α¹³¹x¹⁸ + α¹³⁹x¹⁷ + α³⁴x¹⁶ + α¹⁰¹x¹⁵ + α²²³x¹⁴ + α³⁹x¹³ + α¹⁰¹x¹² + α²¹³x¹¹ + α¹⁹⁹x¹⁰ + α²³⁷x⁹ + α²⁵⁴x⁸ + α²⁰¹x⁷ + α¹²³x⁶ + α¹⁷¹x⁵ + α¹⁶²x⁴ + α¹⁹⁴x³ + α¹¹⁷x² + α⁵⁰x + α⁹⁶"],
    [44, "x⁴⁴ + α¹⁹⁰x⁴³ + α⁷x⁴² + α⁶¹x⁴¹ + α¹²¹x⁴⁰ + α⁷¹x³⁹ + α²⁴⁶x³⁸ + α⁶⁹x³⁷ + α⁵⁵x³⁶ + α¹⁶⁸x³⁵ + α¹⁸⁸x³⁴ + α⁸⁹x³³ + α²⁴³x³² + α¹⁹¹x³¹ + α²⁵x³⁰ + α⁷²x²⁹ + α¹²³x²⁸ + α⁹x²⁷ + α¹⁴⁵x²⁶ + α¹⁴x²⁵ + α²⁴⁷x²⁴ + αx²³ + α²³⁸x²² + α⁴⁴x²¹ + α⁷⁸x²⁰ + α¹⁴³x¹⁹ + α⁶²x¹⁸ + α²²⁴x¹⁷ + α¹²⁶x¹⁶ + α¹¹⁸x¹⁵ + α¹¹⁴x¹⁴ + α⁶⁸x¹³ + α¹⁶³x¹² + α⁵²x¹¹ + α¹⁹⁴x¹⁰ + α²¹⁷x⁹ + α¹⁴⁷x⁸ + α²⁰⁴x⁷ + α¹⁶⁹x⁶ + α³⁷x⁵ + α¹³⁰x⁴ + α¹¹³x³ + α¹⁰²x² + α⁷³x + α¹⁸¹"],
    [46, "x⁴⁶ + α¹¹²x⁴⁵ + α⁹⁴x⁴⁴ + α⁸⁸x⁴³ + α¹¹²x⁴² + α²⁵³x⁴¹ + α²²⁴x⁴⁰ + α²⁰²x³⁹ + α¹¹⁵x³⁸ + α¹⁸⁷x³⁷ + α⁹⁹x³⁶ + α⁸⁹x³⁵ + α⁵x³⁴ + α⁵⁴x³³ + α¹¹³x³² + α¹²⁹x³¹ + α⁴⁴x³⁰ + α⁵⁸x²⁹ + α¹⁶x²⁸ + α¹³⁵x²⁷ + α²¹⁶x²⁶ + α¹⁶⁹x²⁵ + α²¹¹x²⁴ + α³⁶x²³ + αx²² + α⁴x²¹ + α⁹⁶x²⁰ + α⁶⁰x¹⁹ + α²⁴¹x¹⁸ + α⁷³x¹⁷ + α¹⁰⁴x¹⁶ + α²³⁴x¹⁵ + α⁸x¹⁴ + α²⁴⁹x¹³ + α²⁴⁵x¹² + α¹¹⁹x¹¹ + α¹⁷⁴x¹⁰ + α⁵²x⁹ + α²⁵x⁸ + α¹⁵⁷x⁷ + α²²⁴x⁶ + α⁴³x⁵ + α²⁰²x⁴ + α²²³x³ + α¹⁹x² + α⁸²x + α¹⁵"],
    [48, "x⁴⁸ + α²²⁸x⁴⁷ + α²⁵x⁴⁶ + α¹⁹⁶x⁴⁵ + α¹³⁰x⁴⁴ + α²¹¹x⁴³ + α¹⁴⁶x⁴² + α⁶⁰x⁴¹ + α²⁴x⁴⁰ + α²⁵¹x³⁹ + α⁹⁰x³⁸ + α³⁹x³⁷ + α¹⁰²x³⁶ + α²⁴⁰x³⁵ + α⁶¹x³⁴ + α¹⁷⁸x³³ + α⁶³x³² + α⁴⁶x³¹ + α¹²³x³⁰ + α¹¹⁵x²⁹ + α¹⁸x²⁸ + α²²¹x²⁷ + α¹¹¹x²⁶ + α¹³⁵x²⁵ + α¹⁶⁰x²⁴ + α¹⁸²x²³ + α²⁰⁵x²² + α¹⁰⁷x²¹ + α²⁰⁶x²⁰ + α⁹⁵x¹⁹ + α¹⁵⁰x¹⁸ + α¹²⁰x¹⁷ + α¹⁸⁴x¹⁶ + α⁹¹x¹⁵ + α²¹x¹⁴ + α²⁴⁷x¹³ + α¹⁵⁶x¹² + α¹⁴⁰x¹¹ + α²³⁸x¹⁰ + α¹⁹¹x⁹ + α¹¹x⁸ + α⁹⁴x⁷ + α²²⁷x⁶ + α⁸⁴x⁵ + α⁵⁰x⁴ + α¹⁶³x³ + α³⁹x² + α³⁴x + α¹⁰⁸"],
    [50, "x⁵⁰ + α²³²x⁴⁹ + α¹²⁵x⁴⁸ + α¹⁵⁷x⁴⁷ + α¹⁶¹x⁴⁶ + α¹⁶⁴x⁴⁵ + α⁹x⁴⁴ + α¹¹⁸x⁴³ + α⁴⁶x⁴² + α²⁰⁹x⁴¹ + α⁹⁹x⁴⁰ + α²⁰³x³⁹ + α¹⁹³x³⁸ + α³⁵x³⁷ + α³x³⁶ + α²⁰⁹x³⁵ + α¹¹¹x³⁴ + α¹⁹⁵x³³ + α²⁴²x³² + α²⁰³x³¹ + α²²⁵x³⁰ + α⁴⁶x²⁹ + α¹³x²⁸ + α³²x²⁷ + α¹⁶⁰x²⁶ + α¹²⁶x²⁵ + α²⁰⁹x²⁴ + α¹³⁰x²³ + α¹⁶⁰x²² + α²⁴²x²¹ + α²¹⁵x²⁰ + α²⁴²x¹⁹ + α⁷⁵x¹⁸ + α⁷⁷x¹⁷ + α⁴²x¹⁶ + α¹⁸⁹x¹⁵ + α³²x¹⁴ + α¹¹³x¹³ + α⁶⁵x¹² + α¹²⁴x¹¹ + α⁶⁹x¹⁰ + α²²⁸x⁹ + α¹¹⁴x⁸ + α²³⁵x⁷ + α¹⁷⁵x⁶ + α¹²⁴x⁵ + α¹⁷⁰x⁴ + α²¹⁵x³ + α²³²x² + α¹³³x + α²⁰⁵"],
    [52, "x⁵² + α¹¹⁶x⁵¹ + α⁵⁰x⁵⁰ + α⁸⁶x⁴⁹ + α¹⁸⁶x⁴⁸ + α⁵⁰x⁴⁷ + α²²⁰x⁴⁶ + α²⁵¹x⁴⁵ + α⁸⁹x⁴⁴ + α¹⁹²x⁴³ + α⁴⁶x⁴² + α⁸⁶x⁴¹ + α¹²⁷x⁴⁰ + α¹²⁴x³⁹ + α¹⁹x³⁸ + α¹⁸⁴x³⁷ + α²³³x³⁶ + α¹⁵¹x³⁵ + α²¹⁵x³⁴ + α²²x³³ + α¹⁴x³² + α⁵⁹x³¹ + α¹⁴⁵x³⁰ + α³⁷x²⁹ + α²⁴²x²⁸ + α²⁰³x²⁷ + α¹³⁴x²⁶ + α²⁵⁴x²⁵ + α⁸⁹x²⁴ + α¹⁹⁰x²³ + α⁹⁴x²² + α⁵⁹x²¹ + α⁶⁵x²⁰ + α¹²⁴x¹⁹ + α¹¹³x¹⁸ + α¹⁰⁰x¹⁷ + α²³³x¹⁶ + α²³⁵x¹⁵ + α¹²¹x¹⁴ + α²²x¹³ + α⁷⁶x¹² + α⁸⁶x¹¹ + α⁹⁷x¹⁰ + α³⁹x⁹ + α²⁴²x⁸ + α²⁰⁰x⁷ + α²²⁰x⁶ + α¹⁰¹x⁵ + α³³x⁴ + α²³⁹x³ + α²⁵⁴x² + α¹¹⁶x + α⁵¹"],
    [54, "x⁵⁴ + α¹⁸³x⁵³ + α²⁶x⁵² + α²⁰¹x⁵¹ + α⁸⁷x⁵⁰ + α²¹⁰x⁴⁹ + α²²¹x⁴⁸ + α¹¹³x⁴⁷ + α²¹x⁴⁶ + α⁴⁶x⁴⁵ + α⁶⁵x⁴⁴ + α⁴⁵x⁴³ + α⁵⁰x⁴² + α²³⁸x⁴¹ + α¹⁸⁴x⁴⁰ + α²⁴⁹x³⁹ + α²²⁵x³⁸ + α¹⁰²x³⁷ + α⁵⁸x³⁶ + α²⁰⁹x³⁵ + α²¹⁸x³⁴ + α¹⁰⁹x³³ + α¹⁶⁵x³² + α²⁶x³¹ + α⁹⁵x³⁰ + α¹⁸⁴x²⁹ + α¹⁹²x²⁸ + α⁵²x²⁷ + α²⁴⁵x²⁶ + α³⁵x²⁵ + α²⁵⁴x²⁴ + α²³⁸x²³ + α¹⁷⁵x²² + α¹⁷²x²¹ + α⁷⁹x²⁰ + α¹²³x¹⁹ + α²⁵x¹⁸ + α¹²²x¹⁷ + α⁴³x¹⁶ + α¹²⁰x¹⁵ + α¹⁰⁸x¹⁴ + α²¹⁵x¹³ + α⁸⁰x¹² + α¹²⁸x¹¹ + α²⁰¹x¹⁰ + α²³⁵x⁹ + α⁸x⁸ + α¹⁵³x⁷ + α⁵⁹x⁶ + α¹⁰¹x⁵ + α³¹x⁴ + α¹⁹⁸x³ + α⁷⁶x² + α³¹x + α¹⁵⁶"],
    [56, "x⁵⁶ + α¹⁰⁶x⁵⁵ + α¹²⁰x⁵⁴ + α¹⁰⁷x⁵³ + α¹⁵⁷x⁵² + α¹⁶⁴x⁵¹ + α²¹⁶x⁵⁰ + α¹¹²x⁴⁹ + α¹¹⁶x⁴⁸ + α²x⁴⁷ + α⁹¹x⁴⁶ + α²⁴⁸x⁴⁵ + α¹⁶³x⁴⁴ + α³⁶x⁴³ + α²⁰¹x⁴² + α²⁰²x⁴¹ + α²²⁹x⁴⁰ + α⁶x³⁹ + α¹⁴⁴x³⁸ + α²⁵⁴x³⁷ + α¹⁵⁵x³⁶ + α¹³⁵x³⁵ + α²⁰⁸x³⁴ + α¹⁷⁰x³³ + α²⁰⁹x³² + α¹²x³¹ + α¹³⁹x³⁰ + α¹²⁷x²⁹ + α¹⁴²x²⁸ + α¹⁸²x²⁷ + α²⁴⁹x²⁶ + α¹⁷⁷x²⁵ + α¹⁷⁴x²⁴ + α¹⁹⁰x²³ + α²⁸x²² + α¹⁰x²¹ + α⁸⁵x²⁰ + α²³⁹x¹⁹ + α¹⁸⁴x¹⁸ + α¹⁰¹x¹⁷ + α¹²⁴x¹⁶ + α¹⁵²x¹⁵ + α²⁰⁶x¹⁴ + α⁹⁶x¹³ + α²³x¹² + α¹⁶³x¹¹ + α⁶¹x¹⁰ + α²⁷x⁹ + α¹⁹⁶x⁸ + α²⁴⁷x⁷ + α¹⁵¹x⁶ + α¹⁵⁴x⁵ + α²⁰²x⁴ + α²⁰⁷x³ + α²⁰x² + α⁶¹x + α¹⁰"],
    [58, "x⁵⁸ + α⁸²x⁵⁷ + α¹¹⁶x⁵⁶ + α²⁶x⁵⁵ + α²⁴⁷x⁵⁴ + α⁶⁶x⁵³ + α²⁷x⁵² + α⁶²x⁵¹ + α¹⁰⁷x⁵⁰ + α²⁵²x⁴⁹ + α¹⁸²x⁴⁸ + α²⁰⁰x⁴⁷ + α¹⁸⁵x⁴⁶ + α²³⁵x⁴⁵ + α⁵⁵x⁴⁴ + α²⁵¹x⁴³ + α²⁴²x⁴² + α²¹⁰x⁴¹ + α¹⁴⁴x⁴⁰ + α¹⁵⁴x³⁹ + α²³⁷x³⁸ + α¹⁷⁶x³⁷ + α¹⁴¹x³⁶ + α¹⁹²x³⁵ + α²⁴⁸x³⁴ + α¹⁵²x³³ + α²⁴⁹x³² + α²⁰⁶x³¹ + α⁸⁵x³⁰ + α²⁵³x²⁹ + α¹⁴²x²⁸ + α⁶⁵x²⁷ + α¹⁶⁵x²⁶ + α¹²⁵x²⁵ + α²³x²⁴ + α²⁴x²³ + α³⁰x²² + α¹²²x²¹ + α²⁴⁰x²⁰ + α²¹⁴x¹⁹ + α⁶x¹⁸ + α¹²⁹x¹⁷ + α²¹⁸x¹⁶ + α²⁹x¹⁵ + α¹⁴⁵x¹⁴ + α¹²⁷x¹³ + α¹³⁴x¹² + α²⁰⁶x¹¹ + α²⁴⁵x¹⁰ + α¹¹⁷x⁹ + α²⁹x⁸ + α⁴¹x⁷ + α⁶³x⁶ + α¹⁵⁹x⁵ + α¹⁴²x⁴ + α²³³x³ + α¹²⁵x² + α¹⁴⁸x + α¹²³"],
    [60, "x⁶⁰ + α¹⁰⁷x⁵⁹ + α¹⁴⁰x⁵⁸ + α²⁶x⁵⁷ + α¹²x⁵⁶ + α⁹x⁵⁵ + α¹⁴¹x⁵⁴ + α²⁴³x⁵³ + α¹⁹⁷x⁵² + α²²⁶x⁵¹ + α¹⁹⁷x⁵⁰ + α²¹⁹x⁴⁹ + α⁴⁵x⁴⁸ + α²¹¹x⁴⁷ + α¹⁰¹x⁴⁶ + α²¹⁹x⁴⁵ + α¹²⁰x⁴⁴ + α²⁸x⁴³ + α¹⁸¹x⁴² + α¹²⁷x⁴¹ + α⁶x⁴⁰ + α¹⁰⁰x³⁹ + α²⁴⁷x³⁸ + α²x³⁷ + α²⁰⁵x³⁶ + α¹⁹⁸x³⁵ + α⁵⁷x³⁴ + α¹¹⁵x³³ + α²¹⁹x³² + α¹⁰¹x³¹ + α¹⁰⁹x³⁰ + α¹⁶⁰x²⁹ + α⁸²x²⁸ + α³⁷x²⁷ + α³⁸x²⁶ + α²³⁸x²⁵ + α⁴⁹x²⁴ + α¹⁶⁰x²³ + α²⁰⁹x²² + α¹²¹x²¹ + α⁸⁶x²⁰ + α¹¹x¹⁹ + α¹²⁴x¹⁸ + α³⁰x¹⁷ + α¹⁸¹x¹⁶ + α⁸⁴x¹⁵ + α²⁵x¹⁴ + α¹⁹⁴x¹³ + α⁸⁷x¹² + α⁶⁵x¹¹ + α¹⁰²x¹⁰ + α¹⁹⁰x⁹ + α²²⁰x⁸ + α⁷⁰x⁷ + α²⁷x⁶ + α²⁰⁹x⁵ + α¹⁶x⁴ + α⁸⁹x³ + α⁷x² + α³³x + α²⁴⁰"],
    [62, "x⁶² + α⁶⁵x⁶¹ + α²⁰²x⁶⁰ + α¹¹³x⁵⁹ + α⁹⁸x⁵⁸ + α⁷¹x⁵⁷ + α²²³x⁵⁶ + α²⁴⁸x⁵⁵ + α¹¹⁸x⁵⁴ + α²¹⁴x⁵³ + α⁹⁴x⁵² + x⁵¹ + α¹²²x⁵⁰ + α³⁷x⁴⁹ + α²³x⁴⁸ + α²x⁴⁷ + α²²⁸x⁴⁶ + α⁵⁸x⁴⁵ + α¹²¹x⁴⁴ + α⁷x⁴³ + α¹⁰⁵x⁴² + α¹³⁵x⁴¹ + α⁷⁸x⁴⁰ + α²⁴³x³⁹ + α¹¹⁸x³⁸ + α⁷⁰x³⁷ + α⁷⁶x³⁶ + α²²³x³⁵ + α⁸⁹x³⁴ + α⁷²x³³ + α⁵⁰x³² + α⁷⁰x³¹ + α¹¹¹x³⁰ + α¹⁹⁴x²⁹ + α¹⁷x²⁸ + α²¹²x²⁷ + α¹²⁶x²⁶ + α¹⁸¹x²⁵ + α³⁵x²⁴ + α²²¹x²³ + α¹¹⁷x²² + α²³⁵x²¹ + α¹¹x²⁰ + α²²⁹x¹⁹ + α¹⁴⁹x¹⁸ + α¹⁴⁷x¹⁷ + α¹²³x¹⁶ + α²¹³x¹⁵ + α⁴⁰x¹⁴ + α¹¹⁵x¹³ + α⁶x¹² + α²⁰⁰x¹¹ + α¹⁰⁰x¹⁰ + α²⁶x⁹ + α²⁴⁶x⁸ + α¹⁸²x⁷ + α²¹⁸x⁶ + α¹²⁷x⁵ + α²¹⁵x⁴ + α³⁶x³ + α¹⁸⁶x² + α¹¹⁰x + α¹⁰⁶"],
    [64, "x⁶⁴ + α⁴⁵x⁶³ + α⁵¹x⁶² + α¹⁷⁵x⁶¹ + α⁹x⁶⁰ + α⁷x⁵⁹ + α¹⁵⁸x⁵⁸ + α¹⁵⁹x⁵⁷ + α⁴⁹x⁵⁶ + α⁶⁸x⁵⁵ + α¹¹⁹x⁵⁴ + α⁹²x⁵³ + α¹²³x⁵² + α¹⁷⁷x⁵¹ + α²⁰⁴x⁵⁰ + α¹⁸⁷x⁴⁹ + α²⁵⁴x⁴⁸ + α²⁰⁰x⁴⁷ + α⁷⁸x⁴⁶ + α¹⁴¹x⁴⁵ + α¹⁴⁹x⁴⁴ + α¹¹⁹x⁴³ + α²⁶x⁴² + α¹²⁷x⁴¹ + α⁵³x⁴⁰ + α¹⁶⁰x³⁹ + α⁹³x³⁸ + α¹⁹⁹x³⁷ + α²¹²x³⁶ + α²⁹x³⁵ + α²⁴x³⁴ + α¹⁴⁵x³³ + α¹⁵⁶x³² + α²⁰⁸x³¹ + α¹⁵⁰x³⁰ + α²¹⁸x²⁹ + α²⁰⁹x²⁸ + α⁴x²⁷ + α²¹⁶x²⁶ + α⁹¹x²⁵ + α⁴⁷x²⁴ + α¹⁸⁴x²³ + α¹⁴⁶x²² + α⁴⁷x²¹ + α¹⁴⁰x²⁰ + α¹⁹⁵x¹⁹ + α¹⁹⁵x¹⁸ + α¹²⁵x¹⁷ + α²⁴²x¹⁶ + α²³⁸x¹⁵ + α⁶³x¹⁴ + α⁹⁹x¹³ + α¹⁰⁸x¹² + α¹⁴⁰x¹¹ + α²³⁰x¹⁰ + α²⁴²x⁹ + α³¹x⁸ + α²⁰⁴x⁷ + α¹¹x⁶ + α¹⁷⁸x⁵ + α²⁴³x⁴ + α²¹⁷x³ + α¹⁵⁶x² + α²¹³x + α²³¹"],
    [66, "x⁶⁶ + α⁵x⁶⁵ + α¹¹⁸x⁶⁴ + α²²²x⁶³ + α¹⁸⁰x⁶² + α¹³⁶x⁶¹ + α¹³⁶x⁶⁰ + α¹⁶²x⁵⁹ + α⁵¹x⁵⁸ + α⁴⁶x⁵⁷ + α¹¹⁷x⁵⁶ + α¹³x⁵⁵ + α²¹⁵x⁵⁴ + α⁸¹x⁵³ + α¹⁷x⁵² + α¹³⁹x⁵¹ + α²⁴⁷x⁵⁰ + α¹⁹⁷x⁴⁹ + α¹⁷¹x⁴⁸ + α⁹⁵x⁴⁷ + α¹⁷³x⁴⁶ + α⁶⁵x⁴⁵ + α¹³⁷x⁴⁴ + α¹⁷⁸x⁴³ + α⁶⁸x⁴² + α¹¹¹x⁴¹ + α⁹⁵x⁴⁰ + α¹⁰¹x³⁹ + α⁴¹x³⁸ + α⁷²x³⁷ + α²¹⁴x³⁶ + α¹⁶⁹x³⁵ + α¹⁹⁷x³⁴ + α⁹⁵x³³ + α⁷x³² + α⁴⁴x³¹ + α¹⁵⁴x³⁰ + α⁷⁷x²⁹ + α¹¹¹x²⁸ + α²³⁶x²⁷ + α⁴⁰x²⁶ + α¹²¹x²⁵ + α¹⁴³x²⁴ + α⁶³x²³ + α⁸⁷x²² + α⁸⁰x²¹ + α²⁵³x²⁰ + α²⁴⁰x¹⁹ + α¹²⁶x¹⁸ + α²¹⁷x¹⁷ + α⁷⁷x¹⁶ + α³⁴x¹⁵ + α²³²x¹⁴ + α¹⁰⁶x¹³ + α⁵⁰x¹² + α¹⁶⁸x¹¹ + α⁸²x¹⁰ + α⁷⁶x⁹ + α¹⁴⁶x⁸ + α⁶⁷x⁷ + α¹⁰⁶x⁶ + α¹⁷¹x⁵ + α²⁵x⁴ + α¹³²x³ + α⁹³x² + α⁴⁵x + α¹⁰⁵"],
    [68, "x⁶⁸ + α²⁴⁷x⁶⁷ + α¹⁵⁹x⁶⁶ + α²²³x⁶⁵ + α³³x⁶⁴ + α²²⁴x⁶³ + α⁹³x⁶² + α⁷⁷x⁶¹ + α⁷⁰x⁶⁰ + α⁹⁰x⁵⁹ + α¹⁶⁰x⁵⁸ + α³²x⁵⁷ + α²⁵⁴x⁵⁶ + α⁴³x⁵⁵ + α¹⁵⁰x⁵⁴ + α⁸⁴x⁵³ + α¹⁰¹x⁵² + α¹⁹⁰x⁵¹ + α²⁰⁵x⁵⁰ + α¹³³x⁴⁹ + α⁵²x⁴⁸ + α⁶⁰x⁴⁷ + α²⁰²x⁴⁶ + α¹⁶⁵x⁴⁵ + α²²⁰x⁴⁴ + α²⁰³x⁴³ + α¹⁵¹x⁴² + α⁹³x⁴¹ + α⁸⁴x⁴⁰ + α¹⁵x³⁹ + α⁸⁴x³⁸ + α²⁵³x³⁷ + α¹⁷³x³⁶ + α¹⁶⁰x³⁵ + α⁸⁹x³⁴ + α²²⁷x³³ + α⁵²x³² + α¹⁹⁹x³¹ + α⁹⁷x³⁰ + α⁹⁵x²⁹ + α²³¹x²⁸ + α⁵²x²⁷ + α¹⁷⁷x²⁶ + α⁴¹x²⁵ + α¹²⁵x²⁴ + α¹³⁷x²³ + α²⁴¹x²² + α¹⁶⁶x²¹ + α²²⁵x²⁰ + α¹¹⁸x¹⁹ + α²x¹⁸ + α⁵⁴x¹⁷ + α³²x¹⁶ + α⁸²x¹⁵ + α²¹⁵x¹⁴ + α¹⁷⁵x¹³ + α¹⁹⁸x¹² + α⁴³x¹¹ + α²³⁸x¹⁰ + α²³⁵x⁹ + α²⁷x⁸ + α¹⁰¹x⁷ + α¹⁸⁴x⁶ + α¹²⁷x⁵ + α³x⁴ + α⁵x³ + α⁸x² + α¹⁶³x + α²³⁸"],
  ];
  expect(actual).toEqual(expected);
});

test("it works as illustrated in Annex I, I.2", () => {
  const input = Uint8Array.from([
    0b00010000,
    0b00100000,
    0b00001100,
    0b01010110,
    0b01100001,
    0b10000000,
    0b11101100,
    0b00010001,
    0b11101100,
    0b00010001,
    0b11101100,
    0b00010001,
    0b11101100,
    0b00010001,
    0b11101100,
    0b00010001,
  ]);
  const numEccBytes = 10;
  const buffer = new Uint8Array(input.length + numEccBytes);
  buffer.set(input);
  POLYNOMIALS[numEccBytes].generate(buffer);
  expect(buffer).toEqual(Uint8Array.from([
    0b00010000,
    0b00100000,
    0b00001100,
    0b01010110,
    0b01100001,
    0b10000000,
    0b11101100,
    0b00010001,
    0b11101100,
    0b00010001,
    0b11101100,
    0b00010001,
    0b11101100,
    0b00010001,
    0b11101100,
    0b00010001,
    0b10100101,
    0b00100100,
    0b11010100,
    0b11000001,
    0b11101101,
    0b00110110,
    0b11000111,
    0b10000111,
    0b00101100,
    0b01010101,
  ]));
});

test("it works as illustrated in Annex I, I.3", () => {
  const input = Uint8Array.from([
    0b01000000,
    0b00011000,
    0b10101100,
    0b11000011,
    0b00000000,
  ]);
  const numEccBytes = 5;
  const buffer = new Uint8Array(input.length + numEccBytes);
  buffer.set(input);
  POLYNOMIALS[numEccBytes].generate(buffer);
  expect(buffer).toEqual(Uint8Array.from([
    0b01000000,
    0b00011000,
    0b10101100,
    0b11000011,
    0b00000000,
    0b10000110,
    0b00001101,
    0b00100010,
    0b10101110,
    0b00110000,
  ]));
});

test("Correction example (small)", () => {
  const numEccBytes = 5;
  const original = Uint8Array.from([
    0b01000000,
    0b00011000,
    0b10101100,
    0b11000011,
    0b00000000,
    0b10000110,
    0b00001101,
    0b00100010,
    0b10101110,
    0b00110000,
  ]);

  const buf = original.slice();
  buf[6] ^= 0b00000101;
  buf[9] ^= 0b00001001;

  correctErrors(numEccBytes, buf, { p: 0 });
  expect(buf).toEqual(original);
});

function eccProfile(): fc.Arbitrary<{
  t: number,
  p: number,
  block: Uint8Array,
  blockWithError: Uint8Array,
}> {
  return fc.tuple(
    fc.uint8Array({ minLength: 1, maxLength: 150 }),
    fc.nat({ max: 30 }),
    fc.nat({ max: 3 })
  ).chain(([data, t, p]) => {
    const block = new Uint8Array(data.length + t + p);
    block.set(data);
    POLYNOMIALS[t + p].generate(block);
    return fc.array(
      fc.tuple(
        fc.nat({ max: block.length - 1 }),
        fc.nat({ max: 255 })
      ),
      {
        maxLength: Math.floor(t / 2),
      }
    ).map((errorValues) => {
      const blockWithError = block.slice();
      for (const [errorLocation, errorValue] of errorValues) {
        blockWithError[errorLocation] |= errorValue;
      }
      return {
        t,
        p,
        block,
        blockWithError,
      };
    });
  });
}

test.prop([eccProfile()])("Correction behavior", ({
  t,
  p,
  block,
  blockWithError,
}) => {
  const buf = blockWithError.slice();
  correctErrors(t + p, buf, { p });
  expect(buf).toEqual(block);
});
