import { expect, test } from "vitest";
import { SPECS, Version, VERSIONS, VersionSpec } from "./specs";

const M1 = "M1";
const M2 = "M2";
const M3 = "M3";
const M4 = "M4";

test("SPECS matches against Table 1", () => {
  type Row = [
    version: Version,
    width: number,
    functionPatternTotalSize: number,
    metadataSize: number,
    physicalBits: number,
    effectivePhysicalBytes: number,
    physicalPadSize: number,
  ];
  const actual: Row[] = Object.values(VERSIONS).map((version) => [
    SPECS[version].version,
    SPECS[version].width,
    SPECS[version].functionPatternTotalSize,
    SPECS[version].metadataSize,
    SPECS[version].physicalBits,
    SPECS[version].effectivePhysicalBytes,
    SPECS[version].physicalPadSize,
  ]);
  const expected: Row[] = [
    [M1,  11,    70, 15,     36,     5, 0],
    [M2,  13,    74, 15,     80,    10, 0],
    [M3,  15,    78, 15,    132,    17, 0],
    [M4,  17,    82, 15,    192,    24, 0],
    [ 1,  21,   202, 31,    208,    26, 0],
    [ 2,  25,   235, 31,    359,    44, 7],
    [ 3,  29,   243, 31,    567,    70, 7],
    [ 4,  33,   251, 31,    807,   100, 7],
    [ 5,  37,   259, 31,  1_079,   134, 7],
    [ 6,  41,   267, 31,  1_383,   172, 7],
    [ 7,  45,   390, 67,  1_568,   196, 0],
    [ 8,  49,   398, 67,  1_936,   242, 0],
    [ 9,  53,   406, 67,  2_336,   292, 0],
    [10,  57,   414, 67,  2_768,   346, 0],
    [11,  61,   422, 67,  3_232,   404, 0],
    [12,  65,   430, 67,  3_728,   466, 0],
    [13,  69,   438, 67,  4_256,   532, 0],
    [14,  73,   611, 67,  4_651,   581, 3],
    [15,  77,   619, 67,  5_243,   655, 3],
    [16,  81,   627, 67,  5_867,   733, 3],
    [17,  85,   635, 67,  6_523,   815, 3],
    [18,  89,   643, 67,  7_211,   901, 3],
    [19,  93,   651, 67,  7_931,   991, 3],
    [20,  97,   659, 67,  8_683, 1_085, 3],
    [21, 101,   882, 67,  9_252, 1_156, 4],
    [22, 105,   890, 67, 10_068, 1_258, 4],
    [23, 109,   898, 67, 10_916, 1_364, 4],
    [24, 113,   906, 67, 11_796, 1_474, 4],
    [25, 117,   914, 67, 12_708, 1_588, 4],
    [26, 121,   922, 67, 13_652, 1_706, 4],
    [27, 125,   930, 67, 14_628, 1_828, 4],
    [28, 129, 1_203, 67, 15_371, 1_921, 3],
    [29, 133, 1_211, 67, 16_411, 2_051, 3],
    [30, 137, 1_219, 67, 17_483, 2_185, 3],
    [31, 141, 1_227, 67, 18_587, 2_323, 3],
    [32, 145, 1_235, 67, 19_723, 2_465, 3],
    [33, 149, 1_243, 67, 20_891, 2_611, 3],
    [34, 153, 1_251, 67, 22_091, 2_761, 3],
    [35, 157, 1_574, 67, 23_008, 2_876, 0],
    [36, 161, 1_582, 67, 24_272, 3_034, 0],
    [37, 165, 1_590, 67, 25_568, 3_196, 0],
    [38, 169, 1_598, 67, 26_896, 3_362, 0],
    [39, 173, 1_606, 67, 28_256, 3_532, 0],
    [40, 177, 1_614, 67, 29_648, 3_706, 0],
  ];
  expect(actual).toEqual(expected);
});
