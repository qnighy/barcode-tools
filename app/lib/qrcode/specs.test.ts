import { expect, test } from "vitest";
import { SPECS, Version, VERSIONS } from "./specs";

const M1 = "M1";
const M2 = "M2";
const M3 = "M3";
const M4 = "M4";

test("SPECS matches against Table 1", () => {
  type Row = [
    version: Version,
    width: number,
    functionPatternTotalSize: number,
    formatAndVersionInfoSize: number,
    dataCapacityBits: number,
    dataCapacityBytes: number,
    remainderBits: number,
  ];
  const actual: Row[] = Object.values(VERSIONS).map((version) => [
    SPECS[version].version,
    SPECS[version].width,
    SPECS[version].functionPatternTotalSize,
    SPECS[version].formatAndVersionInfoSize,
    SPECS[version].dataCapacityBits,
    SPECS[version].dataCapacityBytes,
    SPECS[version].remainderBits,
  ]);
  const expected: Row[] = [
    [M1,  11,    70, 15,     36,     5, 0],
    [M2,  13,    74, 15,     80,    10, 0],
    [M3,  15,    78, 15,    132,    17, 0],
    [M4,  17,    82, 15,    192,    24, 0],
    [ 1,  21,   202, 31,    208,    26, 0],
    [ 2,  25,   235, 31,    359,    44, 7],
    [ 3,  29,   243, 31,    567,    70, 7],
    [ 4,  33,   251, 31,    807,   100, 7],
    [ 5,  37,   259, 31,  1_079,   134, 7],
    [ 6,  41,   267, 31,  1_383,   172, 7],
    [ 7,  45,   390, 67,  1_568,   196, 0],
    [ 8,  49,   398, 67,  1_936,   242, 0],
    [ 9,  53,   406, 67,  2_336,   292, 0],
    [10,  57,   414, 67,  2_768,   346, 0],
    [11,  61,   422, 67,  3_232,   404, 0],
    [12,  65,   430, 67,  3_728,   466, 0],
    [13,  69,   438, 67,  4_256,   532, 0],
    [14,  73,   611, 67,  4_651,   581, 3],
    [15,  77,   619, 67,  5_243,   655, 3],
    [16,  81,   627, 67,  5_867,   733, 3],
    [17,  85,   635, 67,  6_523,   815, 3],
    [18,  89,   643, 67,  7_211,   901, 3],
    [19,  93,   651, 67,  7_931,   991, 3],
    [20,  97,   659, 67,  8_683, 1_085, 3],
    [21, 101,   882, 67,  9_252, 1_156, 4],
    [22, 105,   890, 67, 10_068, 1_258, 4],
    [23, 109,   898, 67, 10_916, 1_364, 4],
    [24, 113,   906, 67, 11_796, 1_474, 4],
    [25, 117,   914, 67, 12_708, 1_588, 4],
    [26, 121,   922, 67, 13_652, 1_706, 4],
    [27, 125,   930, 67, 14_628, 1_828, 4],
    [28, 129, 1_203, 67, 15_371, 1_921, 3],
    [29, 133, 1_211, 67, 16_411, 2_051, 3],
    [30, 137, 1_219, 67, 17_483, 2_185, 3],
    [31, 141, 1_227, 67, 18_587, 2_323, 3],
    [32, 145, 1_235, 67, 19_723, 2_465, 3],
    [33, 149, 1_243, 67, 20_891, 2_611, 3],
    [34, 153, 1_251, 67, 22_091, 2_761, 3],
    [35, 157, 1_574, 67, 23_008, 2_876, 0],
    [36, 161, 1_582, 67, 24_272, 3_034, 0],
    [37, 165, 1_590, 67, 25_568, 3_196, 0],
    [38, 169, 1_598, 67, 26_896, 3_362, 0],
    [39, 173, 1_606, 67, 28_256, 3_532, 0],
    [40, 177, 1_614, 67, 29_648, 3_706, 0],
  ];
  expect(actual).toEqual(expected);
});

test("SPECS matches against Table 9", () => {
  type Row = [
    version: Version,
    numAllBytes: number,
    level: string,
    numErrorCorrectionBytes: number,
    p: number,
    subRows: SubRow[]
  ];
  type SubRow = [
    numErrorCorrectionBlocks: number,
    c: number,
    k: number,
    r: number
  ];
  const actual: Row[] = [];
  for (const version of VERSIONS) {
    for (const level of ["NONE", "L", "M", "Q", "H"] as const) {
      const spec = SPECS[version].errorCorrectionSpecs[level];
      if (!spec) {
        continue;
      }
      actual.push([
        version,
        SPECS[version].dataCapacityBytes,
        level,
        spec.numEccBytes,
        spec.p,
        spec.eccBlockGroups.map((group) => [
          group.numBlocks,
          group.c,
          group.k,
          group.r,
        ]),
      ]);
    }
  }
  const N = "NONE";
  const L = "L";
  const M = "M";
  const Q = "Q";
  const H = "H";
  const expected: Row[] = [
    [M1,    5, N,    2, 2, [[ 1,   5,   3,  0]]],
    [M2,   10, L,    5, 3, [[ 1,  10,   5,  1]]],
    [M2,   10, M,    6, 2, [[ 1,  10,   4,  2]]],
    [M3,   17, L,    6, 2, [[ 1,  17,  11,  2]]],
    // [M3,   17, M,    8, 2, [[ 1,  17,   9,  4]]], // From the spec
    [M3,   17, M,   10, 2, [[ 1,  17,   7,  4]]], // Tentative
    [M4,   24, L,    8, 2, [[ 1,  24,  16,  3]]],
    [M4,   24, M,   10, 0, [[ 1,  24,  14,  5]]],
    [M4,   24, Q,   14, 0, [[ 1,  24,  10,  7]]],
    [ 1,   26, L,    7, 3, [[ 1,  26,  19,  2]]],
    [ 1,   26, M,   10, 2, [[ 1,  26,  16,  4]]],
    [ 1,   26, Q,   13, 1, [[ 1,  26,  13,  6]]],
    [ 1,   26, H,   17, 1, [[ 1,  26,   9,  8]]],
    [ 2,   44, L,   10, 2, [[ 1,  44,  34,  4]]],
    [ 2,   44, M,   16, 0, [[ 1,  44,  28,  8]]],
    [ 2,   44, Q,   22, 0, [[ 1,  44,  22, 11]]],
    [ 2,   44, H,   28, 0, [[ 1,  44,  16, 14]]],
    [ 3,   70, L,   15, 1, [[ 1,  70,  55,  7]]],
    [ 3,   70, M,   26, 0, [[ 1,  70,  44, 13]]],
    [ 3,   70, Q,   36, 0, [[ 2,  35,  17,  9]]],
    [ 3,   70, H,   44, 0, [[ 2,  35,  13, 11]]],
    [ 4,  100, L,   20, 0, [[ 1, 100,  80, 10]]],
    [ 4,  100, M,   36, 0, [[ 2,  50,  32,  9]]],
    [ 4,  100, Q,   52, 0, [[ 2,  50,  24, 13]]],
    [ 4,  100, H,   64, 0, [[ 4,  25,   9,  8]]],
    [ 5,  134, L,   26, 0, [[ 1, 134, 108, 13]]],
    [ 5,  134, M,   48, 0, [[ 2,  67,  43, 12]]],
    [ 5,  134, Q,   72, 0, [[ 2,  33,  15,  9], [ 2,  34,  16,  9]]],
    [ 5,  134, H,   88, 0, [[ 2,  33,  11, 11], [ 2,  34,  12, 11]]],
    [ 6,  172, L,   36, 0, [[ 2,  86,  68,  9]]],
    [ 6,  172, M,   64, 0, [[ 4,  43,  27,  8]]],
    [ 6,  172, Q,   96, 0, [[ 4,  43,  19, 12]]],
    [ 6,  172, H,  112, 0, [[ 4,  43,  15, 14]]],
    [ 7,  196, L,   40, 0, [[ 2,  98,  78, 10]]],
    [ 7,  196, M,   72, 0, [[ 4,  49,  31,  9]]],
    [ 7,  196, Q,  108, 0, [[ 2,  32,  14,  9], [ 4,  33,  15,  9]]],
    [ 7,  196, H,  130, 0, [[ 4,  39,  13, 13], [ 1,  40,  14, 13]]],
    [ 8,  242, L,   48, 0, [[ 2, 121,  97, 12]]],
    [ 8,  242, M,   88, 0, [[ 2,  60,  38, 11], [ 2,  61,  39, 11]]],
    [ 8,  242, Q,  132, 0, [[ 4,  40,  18, 11], [ 2,  41,  19, 11]]],
    [ 8,  242, H,  156, 0, [[ 4,  40,  14, 13], [ 2,  41,  15, 13]]],
    [ 9,  292, L,   60, 0, [[ 2, 146, 116, 15]]],
    [ 9,  292, M,  110, 0, [[ 3,  58,  36, 11], [ 2,  59,  37, 11]]],
    [ 9,  292, Q,  160, 0, [[ 4,  36,  16, 10], [ 4,  37,  17, 10]]],
    [ 9,  292, H,  192, 0, [[ 4,  36,  12, 12], [ 4,  37,  13, 12]]],
    [10,  346, L,   72, 0, [[ 2,  86,  68,  9], [ 2,  87,  69,  9]]],
    [10,  346, M,  130, 0, [[ 4,  69,  43, 13], [ 1,  70,  44, 13]]],
    [10,  346, Q,  192, 0, [[ 6,  43,  19, 12], [ 2,  44,  20, 12]]],
    [10,  346, H,  224, 0, [[ 6,  43,  15, 14], [ 2,  44,  16, 14]]],
    [11,  404, L,   80, 0, [[ 4, 101,  81, 10]]],
    [11,  404, M,  150, 0, [[ 1,  80,  50, 15], [ 4,  81,  51, 15]]],
    [11,  404, Q,  224, 0, [[ 4,  50,  22, 14], [ 4,  51,  23, 14]]],
    [11,  404, H,  264, 0, [[ 3,  36,  12, 12], [ 8,  37,  13, 12]]],
    [12,  466, L,   96, 0, [[ 2, 116,  92, 12], [ 2, 117,  93, 12]]],
    [12,  466, M,  176, 0, [[ 6,  58,  36, 11], [ 2,  59,  37, 11]]],
    [12,  466, Q,  260, 0, [[ 4,  46,  20, 13], [ 6,  47,  21, 13]]],
    [12,  466, H,  308, 0, [[ 7,  42,  14, 14], [ 4,  43,  15, 14]]],
    [13,  532, L,  104, 0, [[ 4, 133, 107, 13]]],
    [13,  532, M,  198, 0, [[ 8,  59,  37, 11], [ 1,  60,  38, 11]]],
    [13,  532, Q,  288, 0, [[ 8,  44,  20, 12], [ 4,  45,  21, 12]]],
    [13,  532, H,  352, 0, [[12,  33,  11, 11], [ 4,  34,  12, 11]]],
    [14,  581, L,  120, 0, [[ 3, 145, 115, 15], [ 1, 146, 116, 15]]],
    [14,  581, M,  216, 0, [[ 4,  64,  40, 12], [ 5,  65,  41, 12]]],
    [14,  581, Q,  320, 0, [[11,  36,  16, 10], [ 5,  37,  17, 10]]],
    [14,  581, H,  384, 0, [[11,  36,  12, 12], [ 5,  37,  13, 12]]],
    [15,  655, L,  132, 0, [[ 5, 109,  87, 11], [ 1, 110,  88, 11]]],
    [15,  655, M,  240, 0, [[ 5,  65,  41, 12], [ 5,  66,  42, 12]]],
    [15,  655, Q,  360, 0, [[ 5,  54,  24, 15], [ 7,  55,  25, 15]]],
    [15,  655, H,  432, 0, [[11,  36,  12, 12], [ 7,  37,  13, 12]]],
    [16,  733, L,  144, 0, [[ 5, 122,  98, 12], [ 1, 123,  99, 12]]],
    [16,  733, M,  280, 0, [[ 7,  73,  45, 14], [ 3,  74,  46, 14]]],
    [16,  733, Q,  408, 0, [[15,  43,  19, 12], [ 2,  44,  20, 12]]],
    [16,  733, H,  480, 0, [[ 3,  45,  15, 15], [13,  46,  16, 15]]],
    [17,  815, L,  168, 0, [[ 1, 135, 107, 14], [ 5, 136, 108, 14]]],
    [17,  815, M,  308, 0, [[10,  74,  46, 14], [ 1,  75,  47, 14]]],
    [17,  815, Q,  448, 0, [[ 1,  50,  22, 14], [15,  51,  23, 14]]],
    [17,  815, H,  532, 0, [[ 2,  42,  14, 14], [17,  43,  15, 14]]],
    [18,  901, L,  180, 0, [[ 5, 150, 120, 15], [ 1, 151, 121, 15]]],
    [18,  901, M,  338, 0, [[ 9,  69,  43, 13], [ 4,  70,  44, 13]]],
    [18,  901, Q,  504, 0, [[17,  50,  22, 14], [ 1,  51,  23, 14]]],
    [18,  901, H,  588, 0, [[ 2,  42,  14, 14], [19,  43,  15, 14]]],
    [19,  991, L,  196, 0, [[ 3, 141, 113, 14], [ 4, 142, 114, 14]]],
    [19,  991, M,  364, 0, [[ 3,  70,  44, 13], [11,  71,  45, 13]]],
    [19,  991, Q,  546, 0, [[17,  47,  21, 13], [ 4,  48,  22, 13]]],
    [19,  991, H,  650, 0, [[ 9,  39,  13, 13], [16,  40,  14, 13]]],
    [20, 1085, L,  224, 0, [[ 3, 135, 107, 14], [ 5, 136, 108, 14]]],
    [20, 1085, M,  416, 0, [[ 3,  67,  41, 13], [13,  68,  42, 13]]],
    [20, 1085, Q,  600, 0, [[15,  54,  24, 15], [ 5,  55,  25, 15]]],
    [20, 1085, H,  700, 0, [[15,  43,  15, 14], [10,  44,  16, 14]]],
    [21, 1156, L,  224, 0, [[ 4, 144, 116, 14], [ 4, 145, 117, 14]]],
    [21, 1156, M,  442, 0, [[17,  68,  42, 13]]],
    [21, 1156, Q,  644, 0, [[17,  50,  22, 14], [ 6,  51,  23, 14]]],
    [21, 1156, H,  750, 0, [[19,  46,  16, 15], [ 6,  47,  17, 15]]],
    [22, 1258, L,  252, 0, [[ 2, 139, 111, 14], [ 7, 140, 112, 14]]],
    [22, 1258, M,  476, 0, [[17,  74,  46, 14]]],
    [22, 1258, Q,  690, 0, [[ 7,  54,  24, 15], [16,  55,  25, 15]]],
    [22, 1258, H,  816, 0, [[34,  37,  13, 12]]],
    [23, 1364, L,  270, 0, [[ 4, 151, 121, 15], [ 5, 152, 122, 15]]],
    [23, 1364, M,  504, 0, [[ 4,  75,  47, 14], [14,  76,  48, 14]]],
    [23, 1364, Q,  750, 0, [[11,  54,  24, 15], [14,  55,  25, 15]]],
    [23, 1364, H,  900, 0, [[16,  45,  15, 15], [14,  46,  16, 15]]],
    [24, 1474, L,  300, 0, [[ 6, 147, 117, 15], [ 4, 148, 118, 15]]],
    [24, 1474, M,  560, 0, [[ 6,  73,  45, 14], [14,  74,  46, 14]]],
    [24, 1474, Q,  810, 0, [[11,  54,  24, 15], [16,  55,  25, 15]]],
    [24, 1474, H,  960, 0, [[30,  46,  16, 15], [ 2,  47,  17, 15]]],
    [25, 1588, L,  312, 0, [[ 8, 132, 106, 13], [ 4, 133, 107, 13]]],
    [25, 1588, M,  588, 0, [[ 8,  75,  47, 14], [13,  76,  48, 14]]],
    [25, 1588, Q,  870, 0, [[ 7,  54,  24, 15], [22,  55,  25, 15]]],
    [25, 1588, H, 1050, 0, [[22,  45,  15, 15], [13,  46,  16, 15]]],
    [26, 1706, L,  336, 0, [[10, 142, 114, 14], [ 2, 143, 115, 14]]],
    [26, 1706, M,  644, 0, [[19,  74,  46, 14], [ 4,  75,  47, 14]]],
    [26, 1706, Q,  952, 0, [[28,  50,  22, 14], [ 6,  51,  23, 14]]],
    [26, 1706, H, 1110, 0, [[33,  46,  16, 15], [ 4,  47,  17, 15]]],
    [27, 1828, L,  360, 0, [[ 8, 152, 122, 15], [ 4, 153, 123, 15]]],
    [27, 1828, M,  700, 0, [[22,  73,  45, 14], [ 3,  74,  46, 14]]],
    [27, 1828, Q, 1020, 0, [[ 8,  53,  23, 15], [26,  54,  24, 15]]],
    [27, 1828, H, 1200, 0, [[12,  45,  15, 15], [28,  46,  16, 15]]],
    [28, 1921, L,  390, 0, [[ 3, 147, 117, 15], [10, 148, 118, 15]]],
    [28, 1921, M,  728, 0, [[ 3,  73,  45, 14], [23,  74,  46, 14]]],
    [28, 1921, Q, 1050, 0, [[ 4,  54,  24, 15], [31,  55,  25, 15]]],
    [28, 1921, H, 1260, 0, [[11,  45,  15, 15], [31,  46,  16, 15]]],
    [29, 2051, L,  420, 0, [[ 7, 146, 116, 15], [ 7, 147, 117, 15]]],
    [29, 2051, M,  784, 0, [[21,  73,  45, 14], [ 7,  74,  46, 14]]],
    [29, 2051, Q, 1140, 0, [[ 1,  53,  23, 15], [37,  54,  24, 15]]],
    [29, 2051, H, 1350, 0, [[19,  45,  15, 15], [26,  46,  16, 15]]],
    [30, 2185, L,  450, 0, [[ 5, 145, 115, 15], [10, 146, 116, 15]]],
    [30, 2185, M,  812, 0, [[19,  75,  47, 14], [10,  76,  48, 14]]],
    [30, 2185, Q, 1200, 0, [[15,  54,  24, 15], [25,  55,  25, 15]]],
    [30, 2185, H, 1440, 0, [[23,  45,  15, 15], [25,  46,  16, 15]]],
    [31, 2323, L,  480, 0, [[13, 145, 115, 15], [ 3, 146, 116, 15]]],
    [31, 2323, M,  868, 0, [[ 2,  74,  46, 14], [29,  75,  47, 14]]],
    [31, 2323, Q, 1290, 0, [[42,  54,  24, 15], [ 1,  55,  25, 15]]],
    [31, 2323, H, 1530, 0, [[23,  45,  15, 15], [28,  46,  16, 15]]],
    [32, 2465, L,  510, 0, [[17, 145, 115, 15]]],
    [32, 2465, M,  924, 0, [[10,  74,  46, 14], [23,  75,  47, 14]]],
    [32, 2465, Q, 1350, 0, [[10,  54,  24, 15], [35,  55,  25, 15]]],
    [32, 2465, H, 1620, 0, [[19,  45,  15, 15], [35,  46,  16, 15]]],
    [33, 2611, L,  540, 0, [[17, 145, 115, 15], [ 1, 146, 116, 15]]],
    [33, 2611, M,  980, 0, [[14,  74,  46, 14], [21,  75,  47, 14]]],
    [33, 2611, Q, 1440, 0, [[29,  54,  24, 15], [19,  55,  25, 15]]],
    [33, 2611, H, 1710, 0, [[11,  45,  15, 15], [46,  46,  16, 15]]],
    [34, 2761, L,  570, 0, [[13, 145, 115, 15], [ 6, 146, 116, 15]]],
    [34, 2761, M, 1036, 0, [[14,  74,  46, 14], [23,  75,  47, 14]]],
    [34, 2761, Q, 1530, 0, [[44,  54,  24, 15], [ 7,  55,  25, 15]]],
    [34, 2761, H, 1800, 0, [[59,  46,  16, 15], [ 1,  47,  17, 15]]],
    [35, 2876, L,  570, 0, [[12, 151, 121, 15], [ 7, 152, 122, 15]]],
    [35, 2876, M, 1064, 0, [[12,  75,  47, 14], [26,  76,  48, 14]]],
    [35, 2876, Q, 1590, 0, [[39,  54,  24, 15], [14,  55,  25, 15]]],
    [35, 2876, H, 1890, 0, [[22,  45,  15, 15], [41,  46,  16, 15]]],
    [36, 3034, L,  600, 0, [[ 6, 151, 121, 15], [14, 152, 122, 15]]],
    [36, 3034, M, 1120, 0, [[ 6,  75,  47, 14], [34,  76,  48, 14]]],
    [36, 3034, Q, 1680, 0, [[46,  54,  24, 15], [10,  55,  25, 15]]],
    [36, 3034, H, 1980, 0, [[ 2,  45,  15, 15], [64,  46,  16, 15]]],
    [37, 3196, L,  630, 0, [[17, 152, 122, 15], [ 4, 153, 123, 15]]],
    [37, 3196, M, 1204, 0, [[29,  74,  46, 14], [14,  75,  47, 14]]],
    [37, 3196, Q, 1770, 0, [[49,  54,  24, 15], [10,  55,  25, 15]]],
    [37, 3196, H, 2100, 0, [[24,  45,  15, 15], [46,  46,  16, 15]]],
    [38, 3362, L,  660, 0, [[ 4, 152, 122, 15], [18, 153, 123, 15]]],
    [38, 3362, M, 1260, 0, [[13,  74,  46, 14], [32,  75,  47, 14]]],
    [38, 3362, Q, 1860, 0, [[48,  54,  24, 15], [14,  55,  25, 15]]],
    [38, 3362, H, 2220, 0, [[42,  45,  15, 15], [32,  46,  16, 15]]],
    [39, 3532, L,  720, 0, [[20, 147, 117, 15], [ 4, 148, 118, 15]]],
    [39, 3532, M, 1316, 0, [[40,  75,  47, 14], [ 7,  76,  48, 14]]],
    [39, 3532, Q, 1950, 0, [[43,  54,  24, 15], [22,  55,  25, 15]]],
    [39, 3532, H, 2310, 0, [[10,  45,  15, 15], [67,  46,  16, 15]]],
    [40, 3706, L,  750, 0, [[19, 148, 118, 15], [ 6, 149, 119, 15]]],
    [40, 3706, M, 1372, 0, [[18,  75,  47, 14], [31,  76,  48, 14]]],
    [40, 3706, Q, 2040, 0, [[34,  54,  24, 15], [34,  55,  25, 15]]],
    [40, 3706, H, 2430, 0, [[20,  45,  15, 15], [61,  46,  16, 15]]],
  ];
  expect(actual).toEqual(expected);
});

test("SPECS matches against Table E.1", () => {
  type Row = [
    version: Version,
    numAlignmentPatterns: number,
    alignmentPatternPositions: number[],
  ];
  const actual: Row[] = Object.values(VERSIONS).map((version) => [
    SPECS[version].version,
    SPECS[version].numAlignmentPatterns,
    SPECS[version].alignmentPatternPositions,
  ]);
  const expected: Row[] = [
    [M1,  0, []                            ],
    [M2,  0, []                            ],
    [M3,  0, []                            ],
    [M4,  0, []                            ],
    [ 1,  0, []                            ],
    [ 2,  1, [6, 18,]                      ],
    [ 3,  1, [6, 22,]                      ],
    [ 4,  1, [6, 26,]                      ],
    [ 5,  1, [6, 30,]                      ],
    [ 6,  1, [6, 34,]                      ],
    [ 7,  6, [6, 22, 38]                   ],
    [ 8,  6, [6, 24, 42]                   ],
    [ 9,  6, [6, 26, 46]                   ],
    [10,  6, [6, 28, 50]                   ],
    [11,  6, [6, 30, 54]                   ],
    [12,  6, [6, 32, 58]                   ],
    [13,  6, [6, 34, 62]                   ],
    [14, 13, [6, 26, 46, 66]               ],
    [15, 13, [6, 26, 48, 70]               ],
    [16, 13, [6, 26, 50, 74]               ],
    [17, 13, [6, 30, 54, 78]               ],
    [18, 13, [6, 30, 56, 82]               ],
    [19, 13, [6, 30, 58, 86]               ],
    [20, 13, [6, 34, 62, 90]               ],
    [21, 22, [6, 28, 50, 72,  94]          ],
    [22, 22, [6, 26, 50, 74,  98]          ],
    [23, 22, [6, 30, 54, 78, 102]          ],
    [24, 22, [6, 28, 54, 80, 106]          ],
    [25, 22, [6, 32, 58, 84, 110]          ],
    [26, 22, [6, 30, 58, 86, 114]          ],
    [27, 22, [6, 34, 62, 90, 118]          ],
    [28, 33, [6, 26, 50, 74,  98, 122]     ],
    [29, 33, [6, 30, 54, 78, 102, 126]     ],
    [30, 33, [6, 26, 52, 78, 104, 130]     ],
    [31, 33, [6, 30, 56, 82, 108, 134]     ],
    [32, 33, [6, 34, 60, 86, 112, 138]     ],
    [33, 33, [6, 30, 58, 86, 114, 142]     ],
    [34, 33, [6, 34, 62, 90, 118, 146]     ],
    [35, 46, [6, 30, 54, 78, 102, 126, 150]],
    [36, 46, [6, 24, 50, 76, 102, 128, 154]],
    [37, 46, [6, 28, 54, 80, 106, 132, 158]],
    [38, 46, [6, 32, 58, 84, 110, 136, 162]],
    [39, 46, [6, 26, 54, 82, 110, 138, 166]],
    [40, 46, [6, 30, 58, 86, 114, 142, 170]],

  ];
  expect(actual).toEqual(expected);
});
